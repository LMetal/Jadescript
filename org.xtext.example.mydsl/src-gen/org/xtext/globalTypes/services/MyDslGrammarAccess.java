/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class MyDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Model");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cProtocolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cProtocolGlobalProtocolParserRuleCall_0_0 = (RuleCall)cProtocolAssignment_0.eContents().get(0);
		private final Assignment cProtocolAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cProtocolLocalProtocolParserRuleCall_1_0 = (RuleCall)cProtocolAssignment_1.eContents().get(0);
		
		//Model:
		//    protocol = GlobalProtocol | protocol = LocalProtocol
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//protocol = GlobalProtocol | protocol = LocalProtocol
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//protocol = GlobalProtocol
		public Assignment getProtocolAssignment_0() { return cProtocolAssignment_0; }
		
		//GlobalProtocol
		public RuleCall getProtocolGlobalProtocolParserRuleCall_0_0() { return cProtocolGlobalProtocolParserRuleCall_0_0; }
		
		//protocol = LocalProtocol
		public Assignment getProtocolAssignment_1() { return cProtocolAssignment_1; }
		
		//LocalProtocol
		public RuleCall getProtocolLocalProtocolParserRuleCall_1_0() { return cProtocolLocalProtocolParserRuleCall_1_0; }
	}
	public class GlobalProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.GlobalProtocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGlobalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolNameIDTerminalRuleCall_2_0 = (RuleCall)cProtocolNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRolesRolesParserRuleCall_4_0 = (RuleCall)cRolesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProtocolAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cProtocolProtocolParserRuleCall_6_0 = (RuleCall)cProtocolAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//GlobalProtocol:
		//    'global' 'protocol' protocolName=ID '(' roles=Roles '){'protocol=Protocol'}'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'global' 'protocol' protocolName=ID '(' roles=Roles '){'protocol=Protocol'}'
		public Group getGroup() { return cGroup; }
		
		//'global'
		public Keyword getGlobalKeyword_0() { return cGlobalKeyword_0; }
		
		//'protocol'
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }
		
		//protocolName=ID
		public Assignment getProtocolNameAssignment_2() { return cProtocolNameAssignment_2; }
		
		//ID
		public RuleCall getProtocolNameIDTerminalRuleCall_2_0() { return cProtocolNameIDTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//roles=Roles
		public Assignment getRolesAssignment_4() { return cRolesAssignment_4; }
		
		//Roles
		public RuleCall getRolesRolesParserRuleCall_4_0() { return cRolesRolesParserRuleCall_4_0; }
		
		//'){'
		public Keyword getRightParenthesisLeftCurlyBracketKeyword_5() { return cRightParenthesisLeftCurlyBracketKeyword_5; }
		
		//protocol=Protocol
		public Assignment getProtocolAssignment_6() { return cProtocolAssignment_6; }
		
		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_6_0() { return cProtocolProtocolParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class RolesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Roles");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRolesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRolesRoleParserRuleCall_0_0 = (RuleCall)cRolesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRolesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRolesRoleParserRuleCall_1_1_0 = (RuleCall)cRolesAssignment_1_1.eContents().get(0);
		
		//Roles:
		//    roles+=Role (',' roles+=Role)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//roles+=Role (',' roles+=Role)*
		public Group getGroup() { return cGroup; }
		
		//roles+=Role
		public Assignment getRolesAssignment_0() { return cRolesAssignment_0; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_0_0() { return cRolesRoleParserRuleCall_0_0; }
		
		//(',' roles+=Role)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//roles+=Role
		public Assignment getRolesAssignment_1_1() { return cRolesAssignment_1_1; }
		
		//Role
		public RuleCall getRolesRoleParserRuleCall_1_1_0() { return cRolesRoleParserRuleCall_1_1_0; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Role");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cRoleOneParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRoleSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Role:
		//    RoleOne | RoleSet
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//RoleOne | RoleSet
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//RoleOne
		public RuleCall getRoleOneParserRuleCall_0() { return cRoleOneParserRuleCall_0; }
		
		//RoleSet
		public RuleCall getRoleSetParserRuleCall_1() { return cRoleSetParserRuleCall_1; }
	}
	public class RoleOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.RoleOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RoleOne:
		//    'role' name=ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'role' name=ID
		public Group getGroup() { return cGroup; }
		
		//'role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	public class RoleSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.RoleSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRolesetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRefRoleOneCrossReference_3_0 = (CrossReference)cRefAssignment_3.eContents().get(0);
		private final RuleCall cRefRoleOneIDTerminalRuleCall_3_0_1 = (RuleCall)cRefRoleOneCrossReference_3_0.eContents().get(1);
		
		//RoleSet:
		//    'roleset' name=ID ':' ref=[RoleOne | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'roleset' name=ID ':' ref=[RoleOne | ID]
		public Group getGroup() { return cGroup; }
		
		//'roleset'
		public Keyword getRolesetKeyword_0() { return cRolesetKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//ref=[RoleOne | ID]
		public Assignment getRefAssignment_3() { return cRefAssignment_3; }
		
		//[RoleOne | ID]
		public CrossReference getRefRoleOneCrossReference_3_0() { return cRefRoleOneCrossReference_3_0; }
		
		//ID
		public RuleCall getRefRoleOneIDTerminalRuleCall_3_0_1() { return cRefRoleOneIDTerminalRuleCall_3_0_1; }
	}
	public class ProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Protocol");
		private final Assignment cBeginAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBeginAlternatives_0 = (Alternatives)cBeginAssignment.eContents().get(0);
		private final RuleCall cBeginChoiceParserRuleCall_0_0 = (RuleCall)cBeginAlternatives_0.eContents().get(0);
		private final RuleCall cBeginMessageParserRuleCall_0_1 = (RuleCall)cBeginAlternatives_0.eContents().get(1);
		private final RuleCall cBeginRecursionParserRuleCall_0_2 = (RuleCall)cBeginAlternatives_0.eContents().get(2);
		private final RuleCall cBeginForEachParserRuleCall_0_3 = (RuleCall)cBeginAlternatives_0.eContents().get(3);
		private final RuleCall cBeginCloseRecursionParserRuleCall_0_4 = (RuleCall)cBeginAlternatives_0.eContents().get(4);
		private final RuleCall cBeginEndProtocolParserRuleCall_0_5 = (RuleCall)cBeginAlternatives_0.eContents().get(5);
		
		//Protocol:
		//    begin = (Choice | Message | Recursion | ForEach | CloseRecursion | EndProtocol)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//begin = (Choice | Message | Recursion | ForEach | CloseRecursion | EndProtocol)
		public Assignment getBeginAssignment() { return cBeginAssignment; }
		
		//(Choice | Message | Recursion | ForEach | CloseRecursion | EndProtocol)
		public Alternatives getBeginAlternatives_0() { return cBeginAlternatives_0; }
		
		//Choice
		public RuleCall getBeginChoiceParserRuleCall_0_0() { return cBeginChoiceParserRuleCall_0_0; }
		
		//Message
		public RuleCall getBeginMessageParserRuleCall_0_1() { return cBeginMessageParserRuleCall_0_1; }
		
		//Recursion
		public RuleCall getBeginRecursionParserRuleCall_0_2() { return cBeginRecursionParserRuleCall_0_2; }
		
		//ForEach
		public RuleCall getBeginForEachParserRuleCall_0_3() { return cBeginForEachParserRuleCall_0_3; }
		
		//CloseRecursion
		public RuleCall getBeginCloseRecursionParserRuleCall_0_4() { return cBeginCloseRecursionParserRuleCall_0_4; }
		
		//EndProtocol
		public RuleCall getBeginEndProtocolParserRuleCall_0_5() { return cBeginEndProtocolParserRuleCall_0_5; }
	}
	public class EndProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.EndProtocol");
		private final Assignment cEndAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cEndEndKeyword_0 = (Keyword)cEndAssignment.eContents().get(0);
		
		//EndProtocol:
		//    end='End'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//end='End'
		public Assignment getEndAssignment() { return cEndAssignment; }
		
		//'End'
		public Keyword getEndEndKeyword_0() { return cEndEndKeyword_0; }
	}
	public class RecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Recursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecProtocolProtocolParserRuleCall_4_0 = (RuleCall)cRecProtocolAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Recursion:
		//    'rec' name=ID ':''{'
		//        recProtocol=Protocol
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rec' name=ID ':''{'
		//    recProtocol=Protocol
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'rec'
		public Keyword getRecKeyword_0() { return cRecKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//recProtocol=Protocol
		public Assignment getRecProtocolAssignment_4() { return cRecProtocolAssignment_4; }
		
		//Protocol
		public RuleCall getRecProtocolProtocolParserRuleCall_4_0() { return cRecProtocolProtocolParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CloseRecursionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.CloseRecursion");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecursionVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecursionVariableRecursionCrossReference_1_0 = (CrossReference)cRecursionVariableAssignment_1.eContents().get(0);
		private final RuleCall cRecursionVariableRecursionIDTerminalRuleCall_1_0_1 = (RuleCall)cRecursionVariableRecursionCrossReference_1_0.eContents().get(1);
		
		//CloseRecursion: //terminale
		//    'loop' recursionVariable=[Recursion | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////terminale
		//   'loop' recursionVariable=[Recursion | ID]
		public Group getGroup() { return cGroup; }
		
		////terminale
		//   'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//recursionVariable=[Recursion | ID]
		public Assignment getRecursionVariableAssignment_1() { return cRecursionVariableAssignment_1; }
		
		//[Recursion | ID]
		public CrossReference getRecursionVariableRecursionCrossReference_1_0() { return cRecursionVariableRecursionCrossReference_1_0; }
		
		//ID
		public RuleCall getRecursionVariableRecursionIDTerminalRuleCall_1_0_1() { return cRecursionVariableRecursionIDTerminalRuleCall_1_0_1; }
	}
	public class ForEachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.ForEach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLoopRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLoopRoleRoleOneParserRuleCall_1_0 = (RuleCall)cLoopRoleAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRolesetRoleSetCrossReference_4_0 = (CrossReference)cRolesetAssignment_4.eContents().get(0);
		private final RuleCall cRolesetRoleSetIDTerminalRuleCall_4_0_1 = (RuleCall)cRolesetRoleSetCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRefRoleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRefRoleRoleOneCrossReference_6_0 = (CrossReference)cRefRoleAssignment_6.eContents().get(0);
		private final RuleCall cRefRoleRoleOneIDTerminalRuleCall_6_0_1 = (RuleCall)cRefRoleRoleOneCrossReference_6_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cForBodyAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cForBodyProtocolParserRuleCall_9_0 = (RuleCall)cForBodyAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cProtocolAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProtocolProtocolParserRuleCall_12_0 = (RuleCall)cProtocolAssignment_12.eContents().get(0);
		
		//ForEach:
		//    'for' loopRole=RoleOne ':' '<'roleset=[RoleSet | ID] ',' refRole = [RoleOne | ID] '>' '{'
		//        forBody=Protocol
		//    '}'';'
		//    protocol = Protocol
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'for' loopRole=RoleOne ':' '<'roleset=[RoleSet | ID] ',' refRole = [RoleOne | ID] '>' '{'
		//    forBody=Protocol
		//'}'';'
		//protocol = Protocol
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//loopRole=RoleOne
		public Assignment getLoopRoleAssignment_1() { return cLoopRoleAssignment_1; }
		
		//RoleOne
		public RuleCall getLoopRoleRoleOneParserRuleCall_1_0() { return cLoopRoleRoleOneParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//roleset=[RoleSet | ID]
		public Assignment getRolesetAssignment_4() { return cRolesetAssignment_4; }
		
		//[RoleSet | ID]
		public CrossReference getRolesetRoleSetCrossReference_4_0() { return cRolesetRoleSetCrossReference_4_0; }
		
		//ID
		public RuleCall getRolesetRoleSetIDTerminalRuleCall_4_0_1() { return cRolesetRoleSetIDTerminalRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//refRole = [RoleOne | ID]
		public Assignment getRefRoleAssignment_6() { return cRefRoleAssignment_6; }
		
		//[RoleOne | ID]
		public CrossReference getRefRoleRoleOneCrossReference_6_0() { return cRefRoleRoleOneCrossReference_6_0; }
		
		//ID
		public RuleCall getRefRoleRoleOneIDTerminalRuleCall_6_0_1() { return cRefRoleRoleOneIDTerminalRuleCall_6_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//forBody=Protocol
		public Assignment getForBodyAssignment_9() { return cForBodyAssignment_9; }
		
		//Protocol
		public RuleCall getForBodyProtocolParserRuleCall_9_0() { return cForBodyProtocolParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//protocol = Protocol
		public Assignment getProtocolAssignment_12() { return cProtocolAssignment_12; }
		
		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_12_0() { return cProtocolProtocolParserRuleCall_12_0; }
	}
	public class ChoiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Choice");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoleAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRoleRoleOneCrossReference_2_0 = (CrossReference)cRoleAssignment_2.eContents().get(0);
		private final RuleCall cRoleRoleOneIDTerminalRuleCall_2_0_1 = (RuleCall)cRoleRoleOneCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBranchesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBranchesMessageParserRuleCall_4_0 = (RuleCall)cBranchesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBranchesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBranchesMessageParserRuleCall_6_2_0 = (RuleCall)cBranchesAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//Choice:
		//    'choice' 'at' role=[RoleOne | ID] '{'
		//        branches+=Message
		//    '}' ('or' '{'
		//        branches+=Message
		//    '}')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'choice' 'at' role=[RoleOne | ID] '{'
		//    branches+=Message
		//'}' ('or' '{'
		//    branches+=Message
		//'}')*
		public Group getGroup() { return cGroup; }
		
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//role=[RoleOne | ID]
		public Assignment getRoleAssignment_2() { return cRoleAssignment_2; }
		
		//[RoleOne | ID]
		public CrossReference getRoleRoleOneCrossReference_2_0() { return cRoleRoleOneCrossReference_2_0; }
		
		//ID
		public RuleCall getRoleRoleOneIDTerminalRuleCall_2_0_1() { return cRoleRoleOneIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//branches+=Message
		public Assignment getBranchesAssignment_4() { return cBranchesAssignment_4; }
		
		//Message
		public RuleCall getBranchesMessageParserRuleCall_4_0() { return cBranchesMessageParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('or' '{'
		//       branches+=Message
		//   '}')*
		public Group getGroup_6() { return cGroup_6; }
		
		//'or'
		public Keyword getOrKeyword_6_0() { return cOrKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//branches+=Message
		public Assignment getBranchesAssignment_6_2() { return cBranchesAssignment_6_2; }
		
		//Message
		public RuleCall getBranchesMessageParserRuleCall_6_2_0() { return cBranchesMessageParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class MessageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Message");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageNormalParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageQuitParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Message:
		//    MessageNormal |
		//    MessageQuit
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MessageNormal |
		//MessageQuit
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MessageNormal
		public RuleCall getMessageNormalParserRuleCall_0() { return cMessageNormalParserRuleCall_0; }
		
		//MessageQuit
		public RuleCall getMessageQuitParserRuleCall_1() { return cMessageQuitParserRuleCall_1; }
	}
	public class MessageNormalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageNormal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMessageTypeIDTerminalRuleCall_0_0 = (RuleCall)cMessageTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPayloadAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPayloadPayloadParserRuleCall_1_0_1_0 = (RuleCall)cPayloadAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSenderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSenderRoleOneCrossReference_3_0 = (CrossReference)cSenderAssignment_3.eContents().get(0);
		private final RuleCall cSenderRoleOneIDTerminalRuleCall_3_0_1 = (RuleCall)cSenderRoleOneCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReceiverAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cReceiverRoleCrossReference_5_0 = (CrossReference)cReceiverAssignment_5.eContents().get(0);
		private final RuleCall cReceiverRoleIDTerminalRuleCall_5_0_1 = (RuleCall)cReceiverRoleCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cProtocolAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cProtocolProtocolParserRuleCall_7_0 = (RuleCall)cProtocolAssignment_7.eContents().get(0);
		
		//MessageNormal:
		//    messageType=ID ('(' (payload=Payload)? ')' | '()') 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID] '.'
		//    protocol = Protocol
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//messageType=ID ('(' (payload=Payload)? ')' | '()') 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID] '.'
		//protocol = Protocol
		public Group getGroup() { return cGroup; }
		
		//messageType=ID
		public Assignment getMessageTypeAssignment_0() { return cMessageTypeAssignment_0; }
		
		//ID
		public RuleCall getMessageTypeIDTerminalRuleCall_0_0() { return cMessageTypeIDTerminalRuleCall_0_0; }
		
		//('(' (payload=Payload)? ')' | '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' (payload=Payload)? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//(payload=Payload)?
		public Assignment getPayloadAssignment_1_0_1() { return cPayloadAssignment_1_0_1; }
		
		//Payload
		public RuleCall getPayloadPayloadParserRuleCall_1_0_1_0() { return cPayloadPayloadParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sender=[RoleOne | ID]
		public Assignment getSenderAssignment_3() { return cSenderAssignment_3; }
		
		//[RoleOne | ID]
		public CrossReference getSenderRoleOneCrossReference_3_0() { return cSenderRoleOneCrossReference_3_0; }
		
		//ID
		public RuleCall getSenderRoleOneIDTerminalRuleCall_3_0_1() { return cSenderRoleOneIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//receiver=[Role | ID]
		public Assignment getReceiverAssignment_5() { return cReceiverAssignment_5; }
		
		//[Role | ID]
		public CrossReference getReceiverRoleCrossReference_5_0() { return cReceiverRoleCrossReference_5_0; }
		
		//ID
		public RuleCall getReceiverRoleIDTerminalRuleCall_5_0_1() { return cReceiverRoleIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//protocol = Protocol
		public Assignment getProtocolAssignment_7() { return cProtocolAssignment_7; }
		
		//Protocol
		public RuleCall getProtocolProtocolParserRuleCall_7_0() { return cProtocolProtocolParserRuleCall_7_0; }
	}
	public class MessageQuitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageQuit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMessageTypeQUITKeyword_0_0 = (Keyword)cMessageTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSenderAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSenderRoleOneCrossReference_3_0 = (CrossReference)cSenderAssignment_3.eContents().get(0);
		private final RuleCall cSenderRoleOneIDTerminalRuleCall_3_0_1 = (RuleCall)cSenderRoleOneCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cReceiverAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cReceiverRoleCrossReference_5_0 = (CrossReference)cReceiverAssignment_5.eContents().get(0);
		private final RuleCall cReceiverRoleIDTerminalRuleCall_5_0_1 = (RuleCall)cReceiverRoleCrossReference_5_0.eContents().get(1);
		
		//MessageQuit: //terminale
		//    messageType = 'QUIT' '()' 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////terminale
		//   messageType = 'QUIT' '()' 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID]
		public Group getGroup() { return cGroup; }
		
		////terminale
		//   messageType = 'QUIT'
		public Assignment getMessageTypeAssignment_0() { return cMessageTypeAssignment_0; }
		
		//'QUIT'
		public Keyword getMessageTypeQUITKeyword_0_0() { return cMessageTypeQUITKeyword_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//sender=[RoleOne | ID]
		public Assignment getSenderAssignment_3() { return cSenderAssignment_3; }
		
		//[RoleOne | ID]
		public CrossReference getSenderRoleOneCrossReference_3_0() { return cSenderRoleOneCrossReference_3_0; }
		
		//ID
		public RuleCall getSenderRoleOneIDTerminalRuleCall_3_0_1() { return cSenderRoleOneIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//receiver=[Role | ID]
		public Assignment getReceiverAssignment_5() { return cReceiverAssignment_5; }
		
		//[Role | ID]
		public CrossReference getReceiverRoleCrossReference_5_0() { return cReceiverRoleCrossReference_5_0; }
		
		//ID
		public RuleCall getReceiverRoleIDTerminalRuleCall_5_0_1() { return cReceiverRoleIDTerminalRuleCall_5_0_1; }
	}
	public class PayloadElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Payload");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTypesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTypesTypeParserRuleCall_0_0 = (RuleCall)cTypesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cTypesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cTypesTypeParserRuleCall_1_1_0 = (RuleCall)cTypesAssignment_1_1.eContents().get(0);
		
		//Payload:
		//    types+=Type (','types+=Type)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//types+=Type (','types+=Type)*
		public Group getGroup() { return cGroup; }
		
		//types+=Type
		public Assignment getTypesAssignment_0() { return cTypesAssignment_0; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_0_0() { return cTypesTypeParserRuleCall_0_0; }
		
		//(','types+=Type)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//types+=Type
		public Assignment getTypesAssignment_1_1() { return cTypesAssignment_1_1; }
		
		//Type
		public RuleCall getTypesTypeParserRuleCall_1_1_0() { return cTypesTypeParserRuleCall_1_1_0; }
	}
	public class LocalProtocolElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.LocalProtocol");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cProtocolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cProtocolNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProtocolNameIDTerminalRuleCall_2_0 = (RuleCall)cProtocolNameAssignment_2.eContents().get(0);
		private final Keyword cAtKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProjectedRoleAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProjectedRoleRoleOneParserRuleCall_4_0 = (RuleCall)cProjectedRoleAssignment_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRolesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRolesRolesParserRuleCall_6_0 = (RuleCall)cRolesAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cProtocolAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cProtocolProtocolLParserRuleCall_8_0 = (RuleCall)cProtocolAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//LocalProtocol:
		//    'local' 'protocol' protocolName=ID 'at' projectedRole=RoleOne '(' roles=Roles '){'protocol=ProtocolL'}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'local' 'protocol' protocolName=ID 'at' projectedRole=RoleOne '(' roles=Roles '){'protocol=ProtocolL'}'
		public Group getGroup() { return cGroup; }
		
		//'local'
		public Keyword getLocalKeyword_0() { return cLocalKeyword_0; }
		
		//'protocol'
		public Keyword getProtocolKeyword_1() { return cProtocolKeyword_1; }
		
		//protocolName=ID
		public Assignment getProtocolNameAssignment_2() { return cProtocolNameAssignment_2; }
		
		//ID
		public RuleCall getProtocolNameIDTerminalRuleCall_2_0() { return cProtocolNameIDTerminalRuleCall_2_0; }
		
		//'at'
		public Keyword getAtKeyword_3() { return cAtKeyword_3; }
		
		//projectedRole=RoleOne
		public Assignment getProjectedRoleAssignment_4() { return cProjectedRoleAssignment_4; }
		
		//RoleOne
		public RuleCall getProjectedRoleRoleOneParserRuleCall_4_0() { return cProjectedRoleRoleOneParserRuleCall_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5() { return cLeftParenthesisKeyword_5; }
		
		//roles=Roles
		public Assignment getRolesAssignment_6() { return cRolesAssignment_6; }
		
		//Roles
		public RuleCall getRolesRolesParserRuleCall_6_0() { return cRolesRolesParserRuleCall_6_0; }
		
		//'){'
		public Keyword getRightParenthesisLeftCurlyBracketKeyword_7() { return cRightParenthesisLeftCurlyBracketKeyword_7; }
		
		//protocol=ProtocolL
		public Assignment getProtocolAssignment_8() { return cProtocolAssignment_8; }
		
		//ProtocolL
		public RuleCall getProtocolProtocolLParserRuleCall_8_0() { return cProtocolProtocolLParserRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class ProtocolLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.ProtocolL");
		private final Assignment cBeginAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cBeginAlternatives_0 = (Alternatives)cBeginAssignment.eContents().get(0);
		private final RuleCall cBeginMessageLParserRuleCall_0_0 = (RuleCall)cBeginAlternatives_0.eContents().get(0);
		private final RuleCall cBeginChoiceLParserRuleCall_0_1 = (RuleCall)cBeginAlternatives_0.eContents().get(1);
		private final RuleCall cBeginForEachLParserRuleCall_0_2 = (RuleCall)cBeginAlternatives_0.eContents().get(2);
		private final RuleCall cBeginRecursionLParserRuleCall_0_3 = (RuleCall)cBeginAlternatives_0.eContents().get(3);
		private final RuleCall cBeginCloseRecursionLParserRuleCall_0_4 = (RuleCall)cBeginAlternatives_0.eContents().get(4);
		private final RuleCall cBeginEndProtocolParserRuleCall_0_5 = (RuleCall)cBeginAlternatives_0.eContents().get(5);
		
		//ProtocolL:
		//    begin = (MessageL | ChoiceL | ForEachL | RecursionL | CloseRecursionL | EndProtocol)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//begin = (MessageL | ChoiceL | ForEachL | RecursionL | CloseRecursionL | EndProtocol)
		public Assignment getBeginAssignment() { return cBeginAssignment; }
		
		//(MessageL | ChoiceL | ForEachL | RecursionL | CloseRecursionL | EndProtocol)
		public Alternatives getBeginAlternatives_0() { return cBeginAlternatives_0; }
		
		//MessageL
		public RuleCall getBeginMessageLParserRuleCall_0_0() { return cBeginMessageLParserRuleCall_0_0; }
		
		//ChoiceL
		public RuleCall getBeginChoiceLParserRuleCall_0_1() { return cBeginChoiceLParserRuleCall_0_1; }
		
		//ForEachL
		public RuleCall getBeginForEachLParserRuleCall_0_2() { return cBeginForEachLParserRuleCall_0_2; }
		
		//RecursionL
		public RuleCall getBeginRecursionLParserRuleCall_0_3() { return cBeginRecursionLParserRuleCall_0_3; }
		
		//CloseRecursionL
		public RuleCall getBeginCloseRecursionLParserRuleCall_0_4() { return cBeginCloseRecursionLParserRuleCall_0_4; }
		
		//EndProtocol
		public RuleCall getBeginEndProtocolParserRuleCall_0_5() { return cBeginEndProtocolParserRuleCall_0_5; }
	}
	public class RecursionLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.RecursionL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRecKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRecProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRecProtocolProtocolLParserRuleCall_4_0 = (RuleCall)cRecProtocolAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RecursionL:
		//    'rec' name=ID ':''{'
		//        recProtocol=ProtocolL
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'rec' name=ID ':''{'
		//    recProtocol=ProtocolL
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'rec'
		public Keyword getRecKeyword_0() { return cRecKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//recProtocol=ProtocolL
		public Assignment getRecProtocolAssignment_4() { return cRecProtocolAssignment_4; }
		
		//ProtocolL
		public RuleCall getRecProtocolProtocolLParserRuleCall_4_0() { return cRecProtocolProtocolLParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CloseRecursionLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.CloseRecursionL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLoopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRecursionVariableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRecursionVariableRecursionLCrossReference_1_0 = (CrossReference)cRecursionVariableAssignment_1.eContents().get(0);
		private final RuleCall cRecursionVariableRecursionLIDTerminalRuleCall_1_0_1 = (RuleCall)cRecursionVariableRecursionLCrossReference_1_0.eContents().get(1);
		
		//CloseRecursionL: //terminale
		//    'loop' recursionVariable=[RecursionL | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////terminale
		//   'loop' recursionVariable=[RecursionL | ID]
		public Group getGroup() { return cGroup; }
		
		////terminale
		//   'loop'
		public Keyword getLoopKeyword_0() { return cLoopKeyword_0; }
		
		//recursionVariable=[RecursionL | ID]
		public Assignment getRecursionVariableAssignment_1() { return cRecursionVariableAssignment_1; }
		
		//[RecursionL | ID]
		public CrossReference getRecursionVariableRecursionLCrossReference_1_0() { return cRecursionVariableRecursionLCrossReference_1_0; }
		
		//ID
		public RuleCall getRecursionVariableRecursionLIDTerminalRuleCall_1_0_1() { return cRecursionVariableRecursionLIDTerminalRuleCall_1_0_1; }
	}
	public class MessageLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageL");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMessageNormalLParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMessageQuitLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageL:
		//    MessageNormalL |
		//    MessageQuitL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MessageNormalL |
		//MessageQuitL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MessageNormalL
		public RuleCall getMessageNormalLParserRuleCall_0() { return cMessageNormalLParserRuleCall_0; }
		
		//MessageQuitL
		public RuleCall getMessageQuitLParserRuleCall_1() { return cMessageQuitLParserRuleCall_1; }
	}
	public class MessageNormalLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageNormalL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMessageTypeIDTerminalRuleCall_0_0 = (RuleCall)cMessageTypeAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cPayloadAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cPayloadPayloadParserRuleCall_1_0_1_0 = (RuleCall)cPayloadAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		private final Assignment cSendReceiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSendReceiveMessageTypeParserRuleCall_2_0 = (RuleCall)cSendReceiveAssignment_2.eContents().get(0);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProtocolAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cProtocolProtocolLParserRuleCall_4_0 = (RuleCall)cProtocolAssignment_4.eContents().get(0);
		
		//MessageNormalL:
		//    messageType=ID ('(' payload=Payload? ')'| '()') (sendReceive=MessageType) '.'
		//    protocol = ProtocolL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//messageType=ID ('(' payload=Payload? ')'| '()') (sendReceive=MessageType) '.'
		//protocol = ProtocolL
		public Group getGroup() { return cGroup; }
		
		//messageType=ID
		public Assignment getMessageTypeAssignment_0() { return cMessageTypeAssignment_0; }
		
		//ID
		public RuleCall getMessageTypeIDTerminalRuleCall_0_0() { return cMessageTypeIDTerminalRuleCall_0_0; }
		
		//('(' payload=Payload? ')'| '()')
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'(' payload=Payload? ')'
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0_0() { return cLeftParenthesisKeyword_1_0_0; }
		
		//payload=Payload?
		public Assignment getPayloadAssignment_1_0_1() { return cPayloadAssignment_1_0_1; }
		
		//Payload
		public RuleCall getPayloadPayloadParserRuleCall_1_0_1_0() { return cPayloadPayloadParserRuleCall_1_0_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_0_2() { return cRightParenthesisKeyword_1_0_2; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1_1() { return cLeftParenthesisRightParenthesisKeyword_1_1; }
		
		//(sendReceive=MessageType)
		public Assignment getSendReceiveAssignment_2() { return cSendReceiveAssignment_2; }
		
		//MessageType
		public RuleCall getSendReceiveMessageTypeParserRuleCall_2_0() { return cSendReceiveMessageTypeParserRuleCall_2_0; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//protocol = ProtocolL
		public Assignment getProtocolAssignment_4() { return cProtocolAssignment_4; }
		
		//ProtocolL
		public RuleCall getProtocolProtocolLParserRuleCall_4_0() { return cProtocolProtocolLParserRuleCall_4_0; }
	}
	public class MessageQuitLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageQuitL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMessageTypeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cMessageTypeQUITKeyword_0_0 = (Keyword)cMessageTypeAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisRightParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSendReceiveAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSendReceiveMessageTypeParserRuleCall_2_0 = (RuleCall)cSendReceiveAssignment_2.eContents().get(0);
		
		//MessageQuitL:
		//    messageType='QUIT' '()' (sendReceive=MessageType)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//messageType='QUIT' '()' (sendReceive=MessageType)
		public Group getGroup() { return cGroup; }
		
		//messageType='QUIT'
		public Assignment getMessageTypeAssignment_0() { return cMessageTypeAssignment_0; }
		
		//'QUIT'
		public Keyword getMessageTypeQUITKeyword_0_0() { return cMessageTypeQUITKeyword_0_0; }
		
		//'()'
		public Keyword getLeftParenthesisRightParenthesisKeyword_1() { return cLeftParenthesisRightParenthesisKeyword_1; }
		
		//(sendReceive=MessageType)
		public Assignment getSendReceiveAssignment_2() { return cSendReceiveAssignment_2; }
		
		//MessageType
		public RuleCall getSendReceiveMessageTypeParserRuleCall_2_0() { return cSendReceiveMessageTypeParserRuleCall_2_0; }
	}
	public class MessageTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.MessageType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSenderLParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReceiverLParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//MessageType:
		//    SenderL | ReceiverL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SenderL | ReceiverL
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SenderL
		public RuleCall getSenderLParserRuleCall_0() { return cSenderLParserRuleCall_0; }
		
		//ReceiverL
		public RuleCall getReceiverLParserRuleCall_1() { return cReceiverLParserRuleCall_1; }
	}
	public class SenderLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.SenderL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFromKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_1_0 = (CrossReference)cRoleAssignment_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_1_0_1 = (RuleCall)cRoleRoleCrossReference_1_0.eContents().get(1);
		
		//SenderL:
		//    'from' role=[Role | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'from' role=[Role | ID]
		public Group getGroup() { return cGroup; }
		
		//'from'
		public Keyword getFromKeyword_0() { return cFromKeyword_0; }
		
		//role=[Role | ID]
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }
		
		//[Role | ID]
		public CrossReference getRoleRoleCrossReference_1_0() { return cRoleRoleCrossReference_1_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_1_0_1() { return cRoleRoleIDTerminalRuleCall_1_0_1; }
	}
	public class ReceiverLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.ReceiverL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cToKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRoleRoleCrossReference_1_0 = (CrossReference)cRoleAssignment_1.eContents().get(0);
		private final RuleCall cRoleRoleIDTerminalRuleCall_1_0_1 = (RuleCall)cRoleRoleCrossReference_1_0.eContents().get(1);
		
		//ReceiverL:
		//    'to' role=[Role | ID]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'to' role=[Role | ID]
		public Group getGroup() { return cGroup; }
		
		//'to'
		public Keyword getToKeyword_0() { return cToKeyword_0; }
		
		//role=[Role | ID]
		public Assignment getRoleAssignment_1() { return cRoleAssignment_1; }
		
		//[Role | ID]
		public CrossReference getRoleRoleCrossReference_1_0() { return cRoleRoleCrossReference_1_0; }
		
		//ID
		public RuleCall getRoleRoleIDTerminalRuleCall_1_0_1() { return cRoleRoleIDTerminalRuleCall_1_0_1; }
	}
	public class ChoiceLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.ChoiceL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChoiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRoleMakingChoiceAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRoleMakingChoiceRoleCrossReference_2_0 = (CrossReference)cRoleMakingChoiceAssignment_2.eContents().get(0);
		private final RuleCall cRoleMakingChoiceRoleIDTerminalRuleCall_2_0_1 = (RuleCall)cRoleMakingChoiceRoleCrossReference_2_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBranchesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBranchesMessageLParserRuleCall_4_0 = (RuleCall)cBranchesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOrKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cBranchesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cBranchesMessageLParserRuleCall_6_2_0 = (RuleCall)cBranchesAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		
		//ChoiceL:
		//    'choice' 'at' roleMakingChoice=[Role | ID] '{'
		//        branches+=MessageL
		//    '}' ('or' '{'
		//        branches+=MessageL
		//    '}')*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'choice' 'at' roleMakingChoice=[Role | ID] '{'
		//    branches+=MessageL
		//'}' ('or' '{'
		//    branches+=MessageL
		//'}')*
		public Group getGroup() { return cGroup; }
		
		//'choice'
		public Keyword getChoiceKeyword_0() { return cChoiceKeyword_0; }
		
		//'at'
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//roleMakingChoice=[Role | ID]
		public Assignment getRoleMakingChoiceAssignment_2() { return cRoleMakingChoiceAssignment_2; }
		
		//[Role | ID]
		public CrossReference getRoleMakingChoiceRoleCrossReference_2_0() { return cRoleMakingChoiceRoleCrossReference_2_0; }
		
		//ID
		public RuleCall getRoleMakingChoiceRoleIDTerminalRuleCall_2_0_1() { return cRoleMakingChoiceRoleIDTerminalRuleCall_2_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//branches+=MessageL
		public Assignment getBranchesAssignment_4() { return cBranchesAssignment_4; }
		
		//MessageL
		public RuleCall getBranchesMessageLParserRuleCall_4_0() { return cBranchesMessageLParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
		
		//('or' '{'
		//       branches+=MessageL
		//   '}')*
		public Group getGroup_6() { return cGroup_6; }
		
		//'or'
		public Keyword getOrKeyword_6_0() { return cOrKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//branches+=MessageL
		public Assignment getBranchesAssignment_6_2() { return cBranchesAssignment_6_2; }
		
		//MessageL
		public RuleCall getBranchesMessageLParserRuleCall_6_2_0() { return cBranchesMessageLParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
	}
	public class ForEachLElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.ForEachL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cEachRoleAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEachRoleRoleOneParserRuleCall_1_0 = (RuleCall)cEachRoleAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRolesetAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRolesetRoleSetCrossReference_4_0 = (CrossReference)cRolesetAssignment_4.eContents().get(0);
		private final RuleCall cRolesetRoleSetIDTerminalRuleCall_4_0_1 = (RuleCall)cRolesetRoleSetCrossReference_4_0.eContents().get(1);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cRefroleAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cRefroleRoleOneCrossReference_6_0 = (CrossReference)cRefroleAssignment_6.eContents().get(0);
		private final RuleCall cRefroleRoleOneIDTerminalRuleCall_6_0_1 = (RuleCall)cRefroleRoleOneCrossReference_6_0.eContents().get(1);
		private final Keyword cGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cBranchAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cBranchProtocolLParserRuleCall_9_0 = (RuleCall)cBranchAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cSemicolonKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cProtocolAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cProtocolProtocolLParserRuleCall_12_0 = (RuleCall)cProtocolAssignment_12.eContents().get(0);
		
		//ForEachL:
		//    'foreach' eachRole=RoleOne ':' '<'roleset=[RoleSet | ID]','refrole=[RoleOne | ID]'>' '{'
		//        branch=ProtocolL
		//    '}'';'
		//    protocol = ProtocolL
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' eachRole=RoleOne ':' '<'roleset=[RoleSet | ID]','refrole=[RoleOne | ID]'>' '{'
		//    branch=ProtocolL
		//'}'';'
		//protocol = ProtocolL
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//eachRole=RoleOne
		public Assignment getEachRoleAssignment_1() { return cEachRoleAssignment_1; }
		
		//RoleOne
		public RuleCall getEachRoleRoleOneParserRuleCall_1_0() { return cEachRoleRoleOneParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//'<'
		public Keyword getLessThanSignKeyword_3() { return cLessThanSignKeyword_3; }
		
		//roleset=[RoleSet | ID]
		public Assignment getRolesetAssignment_4() { return cRolesetAssignment_4; }
		
		//[RoleSet | ID]
		public CrossReference getRolesetRoleSetCrossReference_4_0() { return cRolesetRoleSetCrossReference_4_0; }
		
		//ID
		public RuleCall getRolesetRoleSetIDTerminalRuleCall_4_0_1() { return cRolesetRoleSetIDTerminalRuleCall_4_0_1; }
		
		//','
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }
		
		//refrole=[RoleOne | ID]
		public Assignment getRefroleAssignment_6() { return cRefroleAssignment_6; }
		
		//[RoleOne | ID]
		public CrossReference getRefroleRoleOneCrossReference_6_0() { return cRefroleRoleOneCrossReference_6_0; }
		
		//ID
		public RuleCall getRefroleRoleOneIDTerminalRuleCall_6_0_1() { return cRefroleRoleOneIDTerminalRuleCall_6_0_1; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_7() { return cGreaterThanSignKeyword_7; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }
		
		//branch=ProtocolL
		public Assignment getBranchAssignment_9() { return cBranchAssignment_9; }
		
		//ProtocolL
		public RuleCall getBranchProtocolLParserRuleCall_9_0() { return cBranchProtocolLParserRuleCall_9_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
		
		//';'
		public Keyword getSemicolonKeyword_11() { return cSemicolonKeyword_11; }
		
		//protocol = ProtocolL
		public Assignment getProtocolAssignment_12() { return cProtocolAssignment_12; }
		
		//ProtocolL
		public RuleCall getProtocolProtocolLParserRuleCall_12_0() { return cProtocolProtocolLParserRuleCall_12_0; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.globalTypes.MyDsl.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIntKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cActionKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//Type:
		//    'int' | 'string' | 'action'  //add more
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'int' | 'string' | 'action'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'int'
		public Keyword getIntKeyword_0() { return cIntKeyword_0; }
		
		//'string'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//'action'
		public Keyword getActionKeyword_2() { return cActionKeyword_2; }
	}
	
	
	private final ModelElements pModel;
	private final GlobalProtocolElements pGlobalProtocol;
	private final RolesElements pRoles;
	private final RoleElements pRole;
	private final RoleOneElements pRoleOne;
	private final RoleSetElements pRoleSet;
	private final ProtocolElements pProtocol;
	private final EndProtocolElements pEndProtocol;
	private final RecursionElements pRecursion;
	private final CloseRecursionElements pCloseRecursion;
	private final ForEachElements pForEach;
	private final ChoiceElements pChoice;
	private final MessageElements pMessage;
	private final MessageNormalElements pMessageNormal;
	private final MessageQuitElements pMessageQuit;
	private final PayloadElements pPayload;
	private final LocalProtocolElements pLocalProtocol;
	private final ProtocolLElements pProtocolL;
	private final RecursionLElements pRecursionL;
	private final CloseRecursionLElements pCloseRecursionL;
	private final MessageLElements pMessageL;
	private final MessageNormalLElements pMessageNormalL;
	private final MessageQuitLElements pMessageQuitL;
	private final MessageTypeElements pMessageType;
	private final SenderLElements pSenderL;
	private final ReceiverLElements pReceiverL;
	private final ChoiceLElements pChoiceL;
	private final ForEachLElements pForEachL;
	private final TypeElements pType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pGlobalProtocol = new GlobalProtocolElements();
		this.pRoles = new RolesElements();
		this.pRole = new RoleElements();
		this.pRoleOne = new RoleOneElements();
		this.pRoleSet = new RoleSetElements();
		this.pProtocol = new ProtocolElements();
		this.pEndProtocol = new EndProtocolElements();
		this.pRecursion = new RecursionElements();
		this.pCloseRecursion = new CloseRecursionElements();
		this.pForEach = new ForEachElements();
		this.pChoice = new ChoiceElements();
		this.pMessage = new MessageElements();
		this.pMessageNormal = new MessageNormalElements();
		this.pMessageQuit = new MessageQuitElements();
		this.pPayload = new PayloadElements();
		this.pLocalProtocol = new LocalProtocolElements();
		this.pProtocolL = new ProtocolLElements();
		this.pRecursionL = new RecursionLElements();
		this.pCloseRecursionL = new CloseRecursionLElements();
		this.pMessageL = new MessageLElements();
		this.pMessageNormalL = new MessageNormalLElements();
		this.pMessageQuitL = new MessageQuitLElements();
		this.pMessageType = new MessageTypeElements();
		this.pSenderL = new SenderLElements();
		this.pReceiverL = new ReceiverLElements();
		this.pChoiceL = new ChoiceLElements();
		this.pForEachL = new ForEachLElements();
		this.pType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.globalTypes.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    protocol = GlobalProtocol | protocol = LocalProtocol
	//;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//GlobalProtocol:
	//    'global' 'protocol' protocolName=ID '(' roles=Roles '){'protocol=Protocol'}'
	//    ;
	public GlobalProtocolElements getGlobalProtocolAccess() {
		return pGlobalProtocol;
	}
	
	public ParserRule getGlobalProtocolRule() {
		return getGlobalProtocolAccess().getRule();
	}
	
	//Roles:
	//    roles+=Role (',' roles+=Role)*
	//;
	public RolesElements getRolesAccess() {
		return pRoles;
	}
	
	public ParserRule getRolesRule() {
		return getRolesAccess().getRule();
	}
	
	//Role:
	//    RoleOne | RoleSet
	//;
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//RoleOne:
	//    'role' name=ID
	//;
	public RoleOneElements getRoleOneAccess() {
		return pRoleOne;
	}
	
	public ParserRule getRoleOneRule() {
		return getRoleOneAccess().getRule();
	}
	
	//RoleSet:
	//    'roleset' name=ID ':' ref=[RoleOne | ID]
	//;
	public RoleSetElements getRoleSetAccess() {
		return pRoleSet;
	}
	
	public ParserRule getRoleSetRule() {
		return getRoleSetAccess().getRule();
	}
	
	//Protocol:
	//    begin = (Choice | Message | Recursion | ForEach | CloseRecursion | EndProtocol)
	//;
	public ProtocolElements getProtocolAccess() {
		return pProtocol;
	}
	
	public ParserRule getProtocolRule() {
		return getProtocolAccess().getRule();
	}
	
	//EndProtocol:
	//    end='End'
	//;
	public EndProtocolElements getEndProtocolAccess() {
		return pEndProtocol;
	}
	
	public ParserRule getEndProtocolRule() {
		return getEndProtocolAccess().getRule();
	}
	
	//Recursion:
	//    'rec' name=ID ':''{'
	//        recProtocol=Protocol
	//    '}'
	//;
	public RecursionElements getRecursionAccess() {
		return pRecursion;
	}
	
	public ParserRule getRecursionRule() {
		return getRecursionAccess().getRule();
	}
	
	//CloseRecursion: //terminale
	//    'loop' recursionVariable=[Recursion | ID]
	//;
	public CloseRecursionElements getCloseRecursionAccess() {
		return pCloseRecursion;
	}
	
	public ParserRule getCloseRecursionRule() {
		return getCloseRecursionAccess().getRule();
	}
	
	//ForEach:
	//    'for' loopRole=RoleOne ':' '<'roleset=[RoleSet | ID] ',' refRole = [RoleOne | ID] '>' '{'
	//        forBody=Protocol
	//    '}'';'
	//    protocol = Protocol
	//;
	public ForEachElements getForEachAccess() {
		return pForEach;
	}
	
	public ParserRule getForEachRule() {
		return getForEachAccess().getRule();
	}
	
	//Choice:
	//    'choice' 'at' role=[RoleOne | ID] '{'
	//        branches+=Message
	//    '}' ('or' '{'
	//        branches+=Message
	//    '}')*
	//;
	public ChoiceElements getChoiceAccess() {
		return pChoice;
	}
	
	public ParserRule getChoiceRule() {
		return getChoiceAccess().getRule();
	}
	
	//Message:
	//    MessageNormal |
	//    MessageQuit
	//;
	public MessageElements getMessageAccess() {
		return pMessage;
	}
	
	public ParserRule getMessageRule() {
		return getMessageAccess().getRule();
	}
	
	//MessageNormal:
	//    messageType=ID ('(' (payload=Payload)? ')' | '()') 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID] '.'
	//    protocol = Protocol
	//;
	public MessageNormalElements getMessageNormalAccess() {
		return pMessageNormal;
	}
	
	public ParserRule getMessageNormalRule() {
		return getMessageNormalAccess().getRule();
	}
	
	//MessageQuit: //terminale
	//    messageType = 'QUIT' '()' 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID]
	//;
	public MessageQuitElements getMessageQuitAccess() {
		return pMessageQuit;
	}
	
	public ParserRule getMessageQuitRule() {
		return getMessageQuitAccess().getRule();
	}
	
	//Payload:
	//    types+=Type (','types+=Type)*
	//;
	public PayloadElements getPayloadAccess() {
		return pPayload;
	}
	
	public ParserRule getPayloadRule() {
		return getPayloadAccess().getRule();
	}
	
	//LocalProtocol:
	//    'local' 'protocol' protocolName=ID 'at' projectedRole=RoleOne '(' roles=Roles '){'protocol=ProtocolL'}'
	//;
	public LocalProtocolElements getLocalProtocolAccess() {
		return pLocalProtocol;
	}
	
	public ParserRule getLocalProtocolRule() {
		return getLocalProtocolAccess().getRule();
	}
	
	//ProtocolL:
	//    begin = (MessageL | ChoiceL | ForEachL | RecursionL | CloseRecursionL | EndProtocol)
	//;
	public ProtocolLElements getProtocolLAccess() {
		return pProtocolL;
	}
	
	public ParserRule getProtocolLRule() {
		return getProtocolLAccess().getRule();
	}
	
	//RecursionL:
	//    'rec' name=ID ':''{'
	//        recProtocol=ProtocolL
	//    '}'
	//;
	public RecursionLElements getRecursionLAccess() {
		return pRecursionL;
	}
	
	public ParserRule getRecursionLRule() {
		return getRecursionLAccess().getRule();
	}
	
	//CloseRecursionL: //terminale
	//    'loop' recursionVariable=[RecursionL | ID]
	//;
	public CloseRecursionLElements getCloseRecursionLAccess() {
		return pCloseRecursionL;
	}
	
	public ParserRule getCloseRecursionLRule() {
		return getCloseRecursionLAccess().getRule();
	}
	
	//MessageL:
	//    MessageNormalL |
	//    MessageQuitL
	//;
	public MessageLElements getMessageLAccess() {
		return pMessageL;
	}
	
	public ParserRule getMessageLRule() {
		return getMessageLAccess().getRule();
	}
	
	//MessageNormalL:
	//    messageType=ID ('(' payload=Payload? ')'| '()') (sendReceive=MessageType) '.'
	//    protocol = ProtocolL
	//;
	public MessageNormalLElements getMessageNormalLAccess() {
		return pMessageNormalL;
	}
	
	public ParserRule getMessageNormalLRule() {
		return getMessageNormalLAccess().getRule();
	}
	
	//MessageQuitL:
	//    messageType='QUIT' '()' (sendReceive=MessageType)
	//;
	public MessageQuitLElements getMessageQuitLAccess() {
		return pMessageQuitL;
	}
	
	public ParserRule getMessageQuitLRule() {
		return getMessageQuitLAccess().getRule();
	}
	
	//MessageType:
	//    SenderL | ReceiverL
	//;
	public MessageTypeElements getMessageTypeAccess() {
		return pMessageType;
	}
	
	public ParserRule getMessageTypeRule() {
		return getMessageTypeAccess().getRule();
	}
	
	//SenderL:
	//    'from' role=[Role | ID]
	//;
	public SenderLElements getSenderLAccess() {
		return pSenderL;
	}
	
	public ParserRule getSenderLRule() {
		return getSenderLAccess().getRule();
	}
	
	//ReceiverL:
	//    'to' role=[Role | ID]
	//;
	public ReceiverLElements getReceiverLAccess() {
		return pReceiverL;
	}
	
	public ParserRule getReceiverLRule() {
		return getReceiverLAccess().getRule();
	}
	
	//ChoiceL:
	//    'choice' 'at' roleMakingChoice=[Role | ID] '{'
	//        branches+=MessageL
	//    '}' ('or' '{'
	//        branches+=MessageL
	//    '}')*
	//;
	public ChoiceLElements getChoiceLAccess() {
		return pChoiceL;
	}
	
	public ParserRule getChoiceLRule() {
		return getChoiceLAccess().getRule();
	}
	
	//ForEachL:
	//    'foreach' eachRole=RoleOne ':' '<'roleset=[RoleSet | ID]','refrole=[RoleOne | ID]'>' '{'
	//        branch=ProtocolL
	//    '}'';'
	//    protocol = ProtocolL
	//;
	public ForEachLElements getForEachLAccess() {
		return pForEachL;
	}
	
	public ParserRule getForEachLRule() {
		return getForEachLAccess().getRule();
	}
	
	//Type:
	//    'int' | 'string' | 'action'  //add more
	//;
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
