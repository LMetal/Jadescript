/**
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.myDsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import org.xtext.globalTypes.myDsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class MyDslFactoryImpl extends EFactoryImpl implements MyDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static MyDslFactory init()
  {
    try
    {
      MyDslFactory theMyDslFactory = (MyDslFactory)EPackage.Registry.INSTANCE.getEFactory(MyDslPackage.eNS_URI);
      if (theMyDslFactory != null)
      {
        return theMyDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new MyDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MyDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case MyDslPackage.MODEL: return createModel();
      case MyDslPackage.GLOBAL_PROTOCOL: return createGlobalProtocol();
      case MyDslPackage.ROLES: return createRoles();
      case MyDslPackage.ROLE: return createRole();
      case MyDslPackage.ROLE_ONE: return createRoleOne();
      case MyDslPackage.ROLE_SET: return createRoleSet();
      case MyDslPackage.PROTOCOL: return createProtocol();
      case MyDslPackage.RECURSION: return createRecursion();
      case MyDslPackage.CLOSE_RECURSION: return createCloseRecursion();
      case MyDslPackage.FOR_EACH: return createForEach();
      case MyDslPackage.CHOICE: return createChoice();
      case MyDslPackage.MESSAGE: return createMessage();
      case MyDslPackage.PAYLOAD: return createPayload();
      case MyDslPackage.LOCAL_PROTOCOL: return createLocalProtocol();
      case MyDslPackage.PROTOCOL_L: return createProtocolL();
      case MyDslPackage.MESSAGE_L: return createMessageL();
      case MyDslPackage.SENDER_L: return createSenderL();
      case MyDslPackage.RECEIVER_L: return createReceiverL();
      case MyDslPackage.CHOICE_L: return createChoiceL();
      case MyDslPackage.FOR_EACH_L: return createForEachL();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public GlobalProtocol createGlobalProtocol()
  {
    GlobalProtocolImpl globalProtocol = new GlobalProtocolImpl();
    return globalProtocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Roles createRoles()
  {
    RolesImpl roles = new RolesImpl();
    return roles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Role createRole()
  {
    RoleImpl role = new RoleImpl();
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleOne createRoleOne()
  {
    RoleOneImpl roleOne = new RoleOneImpl();
    return roleOne;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleSet createRoleSet()
  {
    RoleSetImpl roleSet = new RoleSetImpl();
    return roleSet;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Protocol createProtocol()
  {
    ProtocolImpl protocol = new ProtocolImpl();
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Recursion createRecursion()
  {
    RecursionImpl recursion = new RecursionImpl();
    return recursion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CloseRecursion createCloseRecursion()
  {
    CloseRecursionImpl closeRecursion = new CloseRecursionImpl();
    return closeRecursion;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForEach createForEach()
  {
    ForEachImpl forEach = new ForEachImpl();
    return forEach;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Choice createChoice()
  {
    ChoiceImpl choice = new ChoiceImpl();
    return choice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Message createMessage()
  {
    MessageImpl message = new MessageImpl();
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Payload createPayload()
  {
    PayloadImpl payload = new PayloadImpl();
    return payload;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LocalProtocol createLocalProtocol()
  {
    LocalProtocolImpl localProtocol = new LocalProtocolImpl();
    return localProtocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProtocolL createProtocolL()
  {
    ProtocolLImpl protocolL = new ProtocolLImpl();
    return protocolL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MessageL createMessageL()
  {
    MessageLImpl messageL = new MessageLImpl();
    return messageL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SenderL createSenderL()
  {
    SenderLImpl senderL = new SenderLImpl();
    return senderL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ReceiverL createReceiverL()
  {
    ReceiverLImpl receiverL = new ReceiverLImpl();
    return receiverL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ChoiceL createChoiceL()
  {
    ChoiceLImpl choiceL = new ChoiceLImpl();
    return choiceL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForEachL createForEachL()
  {
    ForEachLImpl forEachL = new ForEachLImpl();
    return forEachL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MyDslPackage getMyDslPackage()
  {
    return (MyDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static MyDslPackage getPackage()
  {
    return MyDslPackage.eINSTANCE;
  }

} //MyDslFactoryImpl
