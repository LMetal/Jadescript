/**
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.globalTypes.myDsl.LocalProtocol;
import org.xtext.globalTypes.myDsl.MyDslPackage;
import org.xtext.globalTypes.myDsl.ProtocolL;
import org.xtext.globalTypes.myDsl.RolesL;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Local Protocol</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.LocalProtocolImpl#getProtocolName <em>Protocol Name</em>}</li>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.LocalProtocolImpl#getProjectedRole <em>Projected Role</em>}</li>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.LocalProtocolImpl#getRoles <em>Roles</em>}</li>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.LocalProtocolImpl#getProtocol <em>Protocol</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LocalProtocolImpl extends MinimalEObjectImpl.Container implements LocalProtocol
{
  /**
   * The default value of the '{@link #getProtocolName() <em>Protocol Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProtocolName()
   * @generated
   * @ordered
   */
  protected static final String PROTOCOL_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProtocolName() <em>Protocol Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProtocolName()
   * @generated
   * @ordered
   */
  protected String protocolName = PROTOCOL_NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getProjectedRole() <em>Projected Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectedRole()
   * @generated
   * @ordered
   */
  protected static final String PROJECTED_ROLE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getProjectedRole() <em>Projected Role</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectedRole()
   * @generated
   * @ordered
   */
  protected String projectedRole = PROJECTED_ROLE_EDEFAULT;

  /**
   * The cached value of the '{@link #getRoles() <em>Roles</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRoles()
   * @generated
   * @ordered
   */
  protected RolesL roles;

  /**
   * The cached value of the '{@link #getProtocol() <em>Protocol</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProtocol()
   * @generated
   * @ordered
   */
  protected ProtocolL protocol;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LocalProtocolImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.LOCAL_PROTOCOL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProtocolName()
  {
    return protocolName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProtocolName(String newProtocolName)
  {
    String oldProtocolName = protocolName;
    protocolName = newProtocolName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__PROTOCOL_NAME, oldProtocolName, protocolName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getProjectedRole()
  {
    return projectedRole;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProjectedRole(String newProjectedRole)
  {
    String oldProjectedRole = projectedRole;
    projectedRole = newProjectedRole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__PROJECTED_ROLE, oldProjectedRole, projectedRole));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RolesL getRoles()
  {
    return roles;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRoles(RolesL newRoles, NotificationChain msgs)
  {
    RolesL oldRoles = roles;
    roles = newRoles;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__ROLES, oldRoles, newRoles);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRoles(RolesL newRoles)
  {
    if (newRoles != roles)
    {
      NotificationChain msgs = null;
      if (roles != null)
        msgs = ((InternalEObject)roles).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LOCAL_PROTOCOL__ROLES, null, msgs);
      if (newRoles != null)
        msgs = ((InternalEObject)newRoles).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LOCAL_PROTOCOL__ROLES, null, msgs);
      msgs = basicSetRoles(newRoles, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__ROLES, newRoles, newRoles));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProtocolL getProtocol()
  {
    return protocol;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProtocol(ProtocolL newProtocol, NotificationChain msgs)
  {
    ProtocolL oldProtocol = protocol;
    protocol = newProtocol;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__PROTOCOL, oldProtocol, newProtocol);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setProtocol(ProtocolL newProtocol)
  {
    if (newProtocol != protocol)
    {
      NotificationChain msgs = null;
      if (protocol != null)
        msgs = ((InternalEObject)protocol).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LOCAL_PROTOCOL__PROTOCOL, null, msgs);
      if (newProtocol != null)
        msgs = ((InternalEObject)newProtocol).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.LOCAL_PROTOCOL__PROTOCOL, null, msgs);
      msgs = basicSetProtocol(newProtocol, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.LOCAL_PROTOCOL__PROTOCOL, newProtocol, newProtocol));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.LOCAL_PROTOCOL__ROLES:
        return basicSetRoles(null, msgs);
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL:
        return basicSetProtocol(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL_NAME:
        return getProtocolName();
      case MyDslPackage.LOCAL_PROTOCOL__PROJECTED_ROLE:
        return getProjectedRole();
      case MyDslPackage.LOCAL_PROTOCOL__ROLES:
        return getRoles();
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL:
        return getProtocol();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL_NAME:
        setProtocolName((String)newValue);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__PROJECTED_ROLE:
        setProjectedRole((String)newValue);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__ROLES:
        setRoles((RolesL)newValue);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL:
        setProtocol((ProtocolL)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL_NAME:
        setProtocolName(PROTOCOL_NAME_EDEFAULT);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__PROJECTED_ROLE:
        setProjectedRole(PROJECTED_ROLE_EDEFAULT);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__ROLES:
        setRoles((RolesL)null);
        return;
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL:
        setProtocol((ProtocolL)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL_NAME:
        return PROTOCOL_NAME_EDEFAULT == null ? protocolName != null : !PROTOCOL_NAME_EDEFAULT.equals(protocolName);
      case MyDslPackage.LOCAL_PROTOCOL__PROJECTED_ROLE:
        return PROJECTED_ROLE_EDEFAULT == null ? projectedRole != null : !PROJECTED_ROLE_EDEFAULT.equals(projectedRole);
      case MyDslPackage.LOCAL_PROTOCOL__ROLES:
        return roles != null;
      case MyDslPackage.LOCAL_PROTOCOL__PROTOCOL:
        return protocol != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (protocolName: ");
    result.append(protocolName);
    result.append(", projectedRole: ");
    result.append(projectedRole);
    result.append(')');
    return result.toString();
  }

} //LocalProtocolImpl
