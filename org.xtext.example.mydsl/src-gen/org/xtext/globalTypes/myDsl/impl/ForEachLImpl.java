/**
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.myDsl.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.globalTypes.myDsl.ForEachL;
import org.xtext.globalTypes.myDsl.MyDslPackage;
import org.xtext.globalTypes.myDsl.ProtocolL;
import org.xtext.globalTypes.myDsl.RoleOneL;
import org.xtext.globalTypes.myDsl.RoleSetL;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>For Each L</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.ForEachLImpl#getEachRole <em>Each Role</em>}</li>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.ForEachLImpl#getRole <em>Role</em>}</li>
 *   <li>{@link org.xtext.globalTypes.myDsl.impl.ForEachLImpl#getBranch <em>Branch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForEachLImpl extends MinimalEObjectImpl.Container implements ForEachL
{
  /**
   * The cached value of the '{@link #getEachRole() <em>Each Role</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEachRole()
   * @generated
   * @ordered
   */
  protected RoleOneL eachRole;

  /**
   * The cached value of the '{@link #getRole() <em>Role</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRole()
   * @generated
   * @ordered
   */
  protected RoleSetL role;

  /**
   * The cached value of the '{@link #getBranch() <em>Branch</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getBranch()
   * @generated
   * @ordered
   */
  protected ProtocolL branch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForEachLImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MyDslPackage.Literals.FOR_EACH_L;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleOneL getEachRole()
  {
    return eachRole;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEachRole(RoleOneL newEachRole, NotificationChain msgs)
  {
    RoleOneL oldEachRole = eachRole;
    eachRole = newEachRole;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH_L__EACH_ROLE, oldEachRole, newEachRole);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEachRole(RoleOneL newEachRole)
  {
    if (newEachRole != eachRole)
    {
      NotificationChain msgs = null;
      if (eachRole != null)
        msgs = ((InternalEObject)eachRole).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH_L__EACH_ROLE, null, msgs);
      if (newEachRole != null)
        msgs = ((InternalEObject)newEachRole).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH_L__EACH_ROLE, null, msgs);
      msgs = basicSetEachRole(newEachRole, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH_L__EACH_ROLE, newEachRole, newEachRole));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RoleSetL getRole()
  {
    if (role != null && role.eIsProxy())
    {
      InternalEObject oldRole = (InternalEObject)role;
      role = (RoleSetL)eResolveProxy(oldRole);
      if (role != oldRole)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MyDslPackage.FOR_EACH_L__ROLE, oldRole, role));
      }
    }
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public RoleSetL basicGetRole()
  {
    return role;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRole(RoleSetL newRole)
  {
    RoleSetL oldRole = role;
    role = newRole;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH_L__ROLE, oldRole, role));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ProtocolL getBranch()
  {
    return branch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetBranch(ProtocolL newBranch, NotificationChain msgs)
  {
    ProtocolL oldBranch = branch;
    branch = newBranch;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH_L__BRANCH, oldBranch, newBranch);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setBranch(ProtocolL newBranch)
  {
    if (newBranch != branch)
    {
      NotificationChain msgs = null;
      if (branch != null)
        msgs = ((InternalEObject)branch).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH_L__BRANCH, null, msgs);
      if (newBranch != null)
        msgs = ((InternalEObject)newBranch).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - MyDslPackage.FOR_EACH_L__BRANCH, null, msgs);
      msgs = basicSetBranch(newBranch, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MyDslPackage.FOR_EACH_L__BRANCH, newBranch, newBranch));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH_L__EACH_ROLE:
        return basicSetEachRole(null, msgs);
      case MyDslPackage.FOR_EACH_L__BRANCH:
        return basicSetBranch(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH_L__EACH_ROLE:
        return getEachRole();
      case MyDslPackage.FOR_EACH_L__ROLE:
        if (resolve) return getRole();
        return basicGetRole();
      case MyDslPackage.FOR_EACH_L__BRANCH:
        return getBranch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH_L__EACH_ROLE:
        setEachRole((RoleOneL)newValue);
        return;
      case MyDslPackage.FOR_EACH_L__ROLE:
        setRole((RoleSetL)newValue);
        return;
      case MyDslPackage.FOR_EACH_L__BRANCH:
        setBranch((ProtocolL)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH_L__EACH_ROLE:
        setEachRole((RoleOneL)null);
        return;
      case MyDslPackage.FOR_EACH_L__ROLE:
        setRole((RoleSetL)null);
        return;
      case MyDslPackage.FOR_EACH_L__BRANCH:
        setBranch((ProtocolL)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MyDslPackage.FOR_EACH_L__EACH_ROLE:
        return eachRole != null;
      case MyDslPackage.FOR_EACH_L__ROLE:
        return role != null;
      case MyDslPackage.FOR_EACH_L__BRANCH:
        return branch != null;
    }
    return super.eIsSet(featureID);
  }

} //ForEachLImpl
