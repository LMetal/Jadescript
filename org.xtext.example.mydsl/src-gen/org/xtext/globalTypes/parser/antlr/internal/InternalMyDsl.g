/*
 * generated by Xtext 2.34.0
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.globalTypes.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.globalTypes.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.globalTypes.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;

    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='global'
		{
			newLeafNode(otherlv_0, grammarAccess.getModelAccess().getGlobalKeyword_0());
		}
		otherlv_1='protocol'
		{
			newLeafNode(otherlv_1, grammarAccess.getModelAccess().getProtocolKeyword_1());
		}
		(
			(
				lv_protocolName_2_0=RULE_ID
				{
					newLeafNode(lv_protocolName_2_0, grammarAccess.getModelAccess().getProtocolNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getModelRule());
					}
					setWithLastConsumed(
						$current,
						"protocolName",
						lv_protocolName_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getModelAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getRolesRolesParserRuleCall_4_0());
				}
				lv_roles_4_0=ruleRoles
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"roles",
						lv_roles_4_0,
						"org.xtext.globalTypes.MyDsl.Roles");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5='){'
		{
			newLeafNode(otherlv_5, grammarAccess.getModelAccess().getRightParenthesisLeftCurlyBracketKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getProtocolProtocolParserRuleCall_6_0());
				}
				lv_protocol_6_0=ruleProtocol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"protocol",
						lv_protocol_6_0,
						"org.xtext.globalTypes.MyDsl.Protocol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getModelAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleRoles
entryRuleRoles returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRolesRule()); }
	iv_ruleRoles=ruleRoles
	{ $current=$iv_ruleRoles.current; }
	EOF;

// Rule Roles
ruleRoles returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getRolesAccess().getRolesRoleParserRuleCall_0_0());
				}
				lv_roles_0_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRolesRule());
					}
					add(
						$current,
						"roles",
						lv_roles_0_0,
						"org.xtext.globalTypes.MyDsl.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getRolesAccess().getCommaKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getRolesAccess().getRolesRoleParserRuleCall_1_1_0());
					}
					lv_roles_2_0=ruleRole
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRolesRule());
						}
						add(
							$current,
							"roles",
							lv_roles_2_0,
							"org.xtext.globalTypes.MyDsl.Role");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleRole
entryRuleRole returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleRule()); }
	iv_ruleRole=ruleRole
	{ $current=$iv_ruleRole.current; }
	EOF;

// Rule Role
ruleRole returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getRoleAccess().getRoleOneParserRuleCall_0());
		}
		this_RoleOne_0=ruleRoleOne
		{
			$current = $this_RoleOne_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getRoleAccess().getRoleMultipleParserRuleCall_1());
		}
		this_RoleMultiple_1=ruleRoleMultiple
		{
			$current = $this_RoleMultiple_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRoleOne
entryRuleRoleOne returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleOneRule()); }
	iv_ruleRoleOne=ruleRoleOne
	{ $current=$iv_ruleRoleOne.current; }
	EOF;

// Rule RoleOne
ruleRoleOne returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='role'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleOneAccess().getRoleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ROLENAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoleOneAccess().getNameROLENAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleOneRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.globalTypes.MyDsl.ROLENAME");
				}
			)
		)
	)
;

// Entry rule entryRuleRoleMultiple
entryRuleRoleMultiple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRoleMultipleRule()); }
	iv_ruleRoleMultiple=ruleRoleMultiple
	{ $current=$iv_ruleRoleMultiple.current; }
	EOF;

// Rule RoleMultiple
ruleRoleMultiple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='multrole'
		{
			newLeafNode(otherlv_0, grammarAccess.getRoleMultipleAccess().getMultroleKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ROLENAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRoleMultipleAccess().getNameROLENAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleMultipleRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.globalTypes.MyDsl.ROLENAME");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRoleMultipleAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRoleMultipleRule());
					}
				}
				otherlv_3=RULE_ROLENAME
				{
					newLeafNode(otherlv_3, grammarAccess.getRoleMultipleAccess().getRefRoleOneCrossReference_3_0());
				}
			)
		)
	)
;

// Entry rule entryRuleProtocol
entryRuleProtocol returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProtocolRule()); }
	iv_ruleProtocol=ruleProtocol
	{ $current=$iv_ruleProtocol.current; }
	EOF;

// Rule Protocol
ruleProtocol returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getProtocolAccess().getProtocolAction_0_0(),
						$current);
				}
			)
			(
				(
					(
						{
							newCompositeNode(grammarAccess.getProtocolAccess().getActionsMessageParserRuleCall_0_1_0_0());
						}
						lv_actions_1_1=ruleMessage
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProtocolRule());
							}
							add(
								$current,
								"actions",
								lv_actions_1_1,
								"org.xtext.globalTypes.MyDsl.Message");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getProtocolAccess().getActionsChoiceParserRuleCall_0_1_0_1());
						}
						lv_actions_1_2=ruleChoice
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProtocolRule());
							}
							add(
								$current,
								"actions",
								lv_actions_1_2,
								"org.xtext.globalTypes.MyDsl.Choice");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getProtocolAccess().getActionsRecursionParserRuleCall_0_1_0_2());
						}
						lv_actions_1_3=ruleRecursion
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProtocolRule());
							}
							add(
								$current,
								"actions",
								lv_actions_1_3,
								"org.xtext.globalTypes.MyDsl.Recursion");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getProtocolAccess().getActionsForEachParserRuleCall_0_1_0_3());
						}
						lv_actions_1_4=ruleForEach
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProtocolRule());
							}
							add(
								$current,
								"actions",
								lv_actions_1_4,
								"org.xtext.globalTypes.MyDsl.ForEach");
							afterParserOrEnumRuleCall();
						}
						    |
						{
							newCompositeNode(grammarAccess.getProtocolAccess().getActionsCloseRecursionParserRuleCall_0_1_0_4());
						}
						lv_actions_1_5=ruleCloseRecursion
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProtocolRule());
							}
							add(
								$current,
								"actions",
								lv_actions_1_5,
								"org.xtext.globalTypes.MyDsl.CloseRecursion");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
		    |
		{
			newCompositeNode(grammarAccess.getProtocolAccess().getEndInteractionParserRuleCall_1());
		}
		ruleEndInteraction
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleRecursion
entryRuleRecursion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRecursionRule()); }
	iv_ruleRecursion=ruleRecursion
	{ $current=$iv_ruleRecursion.current; }
	EOF;

// Rule Recursion
ruleRecursion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='rec'
		{
			newLeafNode(otherlv_0, grammarAccess.getRecursionAccess().getRecKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_RECNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getRecursionAccess().getNameRECNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getRecursionRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.globalTypes.MyDsl.RECNAME");
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getRecursionAccess().getColonKeyword_2());
		}
	)
;

// Entry rule entryRuleCloseRecursion
entryRuleCloseRecursion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCloseRecursionRule()); }
	iv_ruleCloseRecursion=ruleCloseRecursion
	{ $current=$iv_ruleCloseRecursion.current; }
	EOF;

// Rule CloseRecursion
ruleCloseRecursion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='loop'
		{
			newLeafNode(otherlv_0, grammarAccess.getCloseRecursionAccess().getLoopKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCloseRecursionRule());
					}
				}
				otherlv_1=RULE_RECNAME
				{
					newLeafNode(otherlv_1, grammarAccess.getCloseRecursionAccess().getRecursionVariableRecursionCrossReference_1_0());
				}
			)
		)
		otherlv_2=';'
		{
			newLeafNode(otherlv_2, grammarAccess.getCloseRecursionAccess().getSemicolonKeyword_2());
		}
	)
;

// Entry rule entryRuleForEach
entryRuleForEach returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForEachRule()); }
	iv_ruleForEach=ruleForEach
	{ $current=$iv_ruleForEach.current; }
	EOF;

// Rule ForEach
ruleForEach returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getForEachAccess().getForeachKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForEachAccess().getEachRoleRoleParserRuleCall_1_0());
				}
				lv_eachRole_1_0=ruleRole
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForEachRule());
					}
					set(
						$current,
						"eachRole",
						lv_eachRole_1_0,
						"org.xtext.globalTypes.MyDsl.Role");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getForEachAccess().getColonKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getForEachRule());
					}
				}
				otherlv_3=RULE_ROLENAME
				{
					newLeafNode(otherlv_3, grammarAccess.getForEachAccess().getRoleRoleMultipleCrossReference_3_0());
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getForEachAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForEachAccess().getBranchProtocolParserRuleCall_5_0());
				}
				lv_branch_5_0=ruleProtocol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForEachRule());
					}
					set(
						$current,
						"branch",
						lv_branch_5_0,
						"org.xtext.globalTypes.MyDsl.Protocol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getForEachAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	iv_ruleChoice=ruleChoice
	{ $current=$iv_ruleChoice.current; }
	EOF;

// Rule Choice
ruleChoice returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='choice'
		{
			newLeafNode(otherlv_0, grammarAccess.getChoiceAccess().getChoiceKeyword_0());
		}
		otherlv_1='at'
		{
			newLeafNode(otherlv_1, grammarAccess.getChoiceAccess().getAtKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getChoiceRule());
					}
				}
				otherlv_2=RULE_ROLENAME
				{
					newLeafNode(otherlv_2, grammarAccess.getChoiceAccess().getRoleRoleOneCrossReference_2_0());
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getChoiceAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getChoiceAccess().getMessageMessageParserRuleCall_4_0());
				}
				lv_message_4_0=ruleMessage
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChoiceRule());
					}
					add(
						$current,
						"message",
						lv_message_4_0,
						"org.xtext.globalTypes.MyDsl.Message");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getChoiceAccess().getBranchProtocolParserRuleCall_5_0());
				}
				lv_branch_5_0=ruleProtocol
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getChoiceRule());
					}
					add(
						$current,
						"branch",
						lv_branch_5_0,
						"org.xtext.globalTypes.MyDsl.Protocol");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getChoiceAccess().getRightCurlyBracketKeyword_6());
		}
		(
			otherlv_7='or'
			{
				newLeafNode(otherlv_7, grammarAccess.getChoiceAccess().getOrKeyword_7_0());
			}
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getChoiceAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChoiceAccess().getMessageMessageParserRuleCall_7_2_0());
					}
					lv_message_9_0=ruleMessage
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChoiceRule());
						}
						add(
							$current,
							"message",
							lv_message_9_0,
							"org.xtext.globalTypes.MyDsl.Message");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getChoiceAccess().getBranchProtocolParserRuleCall_7_3_0());
					}
					lv_branch_10_0=ruleProtocol
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChoiceRule());
						}
						add(
							$current,
							"branch",
							lv_branch_10_0,
							"org.xtext.globalTypes.MyDsl.Protocol");
						afterParserOrEnumRuleCall();
					}
				)
			)
			otherlv_11='}'
			{
				newLeafNode(otherlv_11, grammarAccess.getChoiceAccess().getRightCurlyBracketKeyword_7_4());
			}
		)*
	)
;

// Entry rule entryRuleMessage
entryRuleMessage returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMessageRule()); }
	iv_ruleMessage=ruleMessage
	{ $current=$iv_ruleMessage.current; }
	EOF;

// Rule Message
ruleMessage returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMessageAccess().getMessageTypeMessageTypeParserRuleCall_0_0());
				}
				lv_messageType_0_0=ruleMessageType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMessageRule());
					}
					set(
						$current,
						"messageType",
						lv_messageType_0_0,
						"org.xtext.globalTypes.MyDsl.MessageType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMessageAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMessageAccess().getPayloadPayloadParserRuleCall_2_0());
				}
				lv_payload_2_0=rulePayload
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMessageRule());
					}
					set(
						$current,
						"payload",
						lv_payload_2_0,
						"org.xtext.globalTypes.MyDsl.Payload");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMessageAccess().getRightParenthesisKeyword_3());
		}
		otherlv_4='from'
		{
			newLeafNode(otherlv_4, grammarAccess.getMessageAccess().getFromKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
				}
				otherlv_5=RULE_ROLENAME
				{
					newLeafNode(otherlv_5, grammarAccess.getMessageAccess().getSenderRoleOneCrossReference_5_0());
				}
			)
		)
		otherlv_6='to'
		{
			newLeafNode(otherlv_6, grammarAccess.getMessageAccess().getToKeyword_6());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMessageRule());
					}
				}
				otherlv_7=RULE_ROLENAME
				{
					newLeafNode(otherlv_7, grammarAccess.getMessageAccess().getReceiverRoleCrossReference_7_0());
				}
			)
		)
		otherlv_8=';'
		{
			newLeafNode(otherlv_8, grammarAccess.getMessageAccess().getSemicolonKeyword_8());
		}
	)
;

// Entry rule entryRuleEndInteraction
entryRuleEndInteraction returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEndInteractionRule()); }
	iv_ruleEndInteraction=ruleEndInteraction
	{ $current=$iv_ruleEndInteraction.current.getText(); }
	EOF;

// Rule EndInteraction
ruleEndInteraction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='end'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEndInteractionAccess().getEndKeyword_0());
		}
		kw=';'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEndInteractionAccess().getSemicolonKeyword_1());
		}
	)
;

// Entry rule entryRuleMessageType
entryRuleMessageType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMessageTypeRule()); }
	iv_ruleMessageType=ruleMessageType
	{ $current=$iv_ruleMessageType.current.getText(); }
	EOF;

// Rule MessageType
ruleMessageType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='REQUEST'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMessageTypeAccess().getREQUESTKeyword_0());
		}
		    |
		kw='INFORM'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMessageTypeAccess().getINFORMKeyword_1());
		}
		    |
		kw='AGREE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMessageTypeAccess().getAGREEKeyword_2());
		}
		    |
		kw='REFUSE'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getMessageTypeAccess().getREFUSEKeyword_3());
		}
	)
;

// Entry rule entryRulePayload
entryRulePayload returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPayloadRule()); }
	iv_rulePayload=rulePayload
	{ $current=$iv_rulePayload.current; }
	EOF;

// Rule Payload
rulePayload returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPayloadAccess().getPayloadAction_0(),
					$current);
			}
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPayloadAccess().getTypesTypeParserRuleCall_1_0_0());
					}
					lv_types_1_0=ruleType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPayloadRule());
						}
						add(
							$current,
							"types",
							lv_types_1_0,
							"org.xtext.globalTypes.MyDsl.Type");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getPayloadAccess().getCommaKeyword_1_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getPayloadAccess().getTypesTypeParserRuleCall_1_1_1_0());
						}
						lv_types_3_0=ruleType
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getPayloadRule());
							}
							add(
								$current,
								"types",
								lv_types_3_0,
								"org.xtext.globalTypes.MyDsl.Type");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)
	)
;

// Entry rule entryRuleType
entryRuleType returns [String current=null]:
	{ newCompositeNode(grammarAccess.getTypeRule()); }
	iv_ruleType=ruleType
	{ $current=$iv_ruleType.current.getText(); }
	EOF;

// Rule Type
ruleType returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='int'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getIntKeyword_0());
		}
		    |
		kw='string'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getStringKeyword_1());
		}
		    |
		kw='action'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getTypeAccess().getActionKeyword_2());
		}
	)
;

RULE_ROLENAME : 'A'..'Z' (('A'..'Z')? 'a'..'z')*;

RULE_RECNAME : ('A'..'Z')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
