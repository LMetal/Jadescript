grammar org.xtext.globalTypes.MyDsl with org.eclipse.xtext.common.Terminals

generate myDsl "http://www.xtext.org/globalTypes/MyDsl"

Model:
	//ontology definitions
	definitions+=QuitDefinition
	definitions+=Definition*
	
	(protocol = GlobalProtocol | protocol = LocalProtocol)
;

GlobalProtocol:
	/*
	 * 	As defined in ICTCS Paper "Global Types for Agent Interaction Protocols"
	 	global protocol name(p;‚ü®R, p‚ü©) = G
		where G is defined by:
		G ::= p ‚Üí Q { ‚Ñìùëñ‚ü®Sùëñ‚ü©.Gùëñ }ùëñ‚ààùêº 	Choice of Interactions
		| muX.G | X 				Recursion and Variable
		| End 						End of protocol
		| for x:‚ü®R, q‚ü© G1; G2 		Protocol for participants in a role set
		| x ‚Üí q ‚ÑìQuit 				Exit from role set
	 */
	'global' 'protocol' protocolName=ID '(' roles=Roles '){'protocol=Protocol'}'
	;
	
Definition:
		  type='@proposition' name = ID
		| type='@action' name = ID ('('types+=Type (',' types+=Type)?')')?
		| type='@predicate' name = ID '('types+=Type (',' types+=Type)?')'
		| QuitDefinition
;

QuitDefinition:
	type='@action' name = 'QUIT'
;

Roles:
	roles+=Role (',' roles+=Role)*
;

Role:
	RoleOne | RoleSet
;

RoleOne:
	'role' name=ID
;

RoleSet:
	'roleset' name=ID ':' ref=[RoleOne | ID]
;
    

Protocol:
	begin = (Choice | Message | Recursion | ForEach | CloseRecursion | EndProtocol)
;

EndProtocol:
	end='End'
;


Recursion:
	'rec' name=ID ':''{'
		recProtocol=Protocol
	'}'
;

CloseRecursion: //terminale
	'loop' recursionVariable=[Recursion | ID]
;

ForEach:

	'for' loopRole=RoleOne ':' '<'roleset=[RoleSet | ID] ',' refRole = [RoleOne | ID] '>' '{'
		forBody=Protocol
	'}'';'
	protocol = Protocol
;

Choice:
	'choice' 'at' role=[RoleOne | ID] '{'
		branches+=Message
	'}' ('or' '{'
		branches+=Message
	'}')*
;

Message:
	MessageNormal |
	MessageQuit
;

MessageNormal:
	messageType=[Definition | ID] ('(' (payload=Payload)? ')' | '()') 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID] '.'
	protocol = Protocol
;


MessageQuit: //terminale
	messageType = [Definition | 'QUIT'] '()' 'from' sender=[RoleOne | ID] 'to' receiver=[Role | ID] 
;

Payload:
	types+=Type (','types+=Type)*
;

LocalProtocol:
	'local' 'protocol' protocolName=ID 'at' projectedRole=Role '(' roles=Roles ('){' | ')''{')protocol=ProtocolL'}'
;


ProtocolL:
	begin = (MessageL | ChoiceL | ForEachL | RecursionL | CloseRecursionL | EndProtocol)
;

RecursionL:
	'rec' name=ID ':''{'
		recProtocol=ProtocolL
	'}'
;

CloseRecursionL: //terminale
	'loop' recursionVariable=[RecursionL | ID]
;

MessageL:
	MessageNormalL |
	MessageQuitL
;

MessageNormalL:
	messageType=ID ('(' payload=Payload? ')'| '()') (sendReceive=MessageType) '.'
	protocol = ProtocolL
;

MessageQuitL:
	messageType='QUIT' '()' (sendReceive=MessageType)
;

MessageType:
	SenderL | ReceiverL
;

SenderL:
	'from' role=[Role | ID]
;

ReceiverL:
	'to' role=[Role | ID]
;

ChoiceL:
	'choice' 'at' roleMakingChoice=[Role | ID] '{'
		branches+=MessageL
	'}' ('or' '{'
		branches+=MessageL
	'}')*
;


ForEachL:
	'foreach' eachRole=RoleOne ':' '<'roleset=[RoleSet | ID]','refrole=[RoleOne | ID]'>' '{'
		branch=ProtocolL
	'}'';'
	protocol = ProtocolL
;



Type:
	'int' | 'text' | 'aid' | 'float'  //jadescript types
;


