/**
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.generator;

import com.google.common.base.Objects;
import java.util.List;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.xtext.globalTypes.myDsl.Definition;
import org.xtext.globalTypes.myDsl.GlobalProtocol;
import org.xtext.globalTypes.myDsl.LocalProtocol;
import org.xtext.globalTypes.myDsl.Model;
import org.xtext.globalTypes.myDsl.Role;
import org.xtext.globalTypes.myDsl.RoleOne;
import org.xtext.globalTypes.myDsl.RoleSet;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  private LocalGenerator locGen = new LocalGenerator();

  private JadescriptGenerator jadeGen = new JadescriptGenerator();

  private PayloadNames payloadNames = new PayloadNames();

  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    Model model = ((Model) _head);
    EObject _protocol = model.getProtocol();
    if ((_protocol instanceof GlobalProtocol)) {
      EObject _protocol_1 = model.getProtocol();
      GlobalProtocol globalProtocol = ((GlobalProtocol) _protocol_1);
      fsa.generateFile("Start.java", this.genStartFile(globalProtocol.getRoles()));
      this.payloadNames.init(model.getDefinitions());
      fsa.generateFile("ontology.jade", this.genOntoFile(globalProtocol, model.getDefinitions()));
      EList<Role> _roles = globalProtocol.getRoles().getRoles();
      for (final Role r : _roles) {
        {
          String _name = r.getName();
          String _plus = ("LOCAL in " + _name);
          System.out.println(_plus);
          String _name_1 = r.getName();
          String _plus_1 = ("local/local_" + _name_1);
          String _plus_2 = (_plus_1 + ".jglobal");
          fsa.generateFile(_plus_2, this.locGen.project(globalProtocol, model.getDefinitions(), r));
          String _name_2 = r.getName();
          String _plus_3 = ("END LOCAL on " + _name_2);
          System.out.println(_plus_3);
        }
      }
    } else {
      EObject _protocol_2 = model.getProtocol();
      LocalProtocol localProtocol = ((LocalProtocol) _protocol_2);
      System.out.println("JADE");
      Role _projectedRole = localProtocol.getProjectedRole();
      String _plus = ("jade/jade_" + _projectedRole);
      String _plus_1 = (_plus + ".jade");
      fsa.generateFile(_plus_1, this.jadeGen.translate(localProtocol, model.getDefinitions()));
    }
  }

  public CharSequence genOntoFile(final GlobalProtocol gp, final EList<Definition> definitions) {
    StringConcatenation _builder = new StringConcatenation();
    List<RoleSet> rolesetList = EcoreUtil2.<RoleSet>getAllContentsOfType(gp.getRoles(), RoleSet.class);
    _builder.newLineIfNotEmpty();
    _builder.append("ontology ");
    String _protocolName = gp.getProtocolName();
    _builder.append(_protocolName);
    _builder.newLineIfNotEmpty();
    {
      for(final Definition d : definitions) {
        {
          String _type = d.getType();
          boolean _equals = Objects.equal(_type, "@proposition");
          if (_equals) {
            _builder.append("\t");
            _builder.append("proposition ");
            String _name = d.getName();
            _builder.append(_name, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _type_1 = d.getType();
          boolean _equals_1 = Objects.equal(_type_1, "@predicate");
          if (_equals_1) {
            _builder.append("\t");
            _builder.append("predicate ");
            String _name_1 = d.getName();
            _builder.append(_name_1, "\t");
            _builder.append("(");
            String _payload = this.payloadNames.getPayload(d);
            _builder.append(_payload, "\t");
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          String _type_2 = d.getType();
          boolean _equals_2 = Objects.equal(_type_2, "@action");
          if (_equals_2) {
            {
              int _length = ((Object[])Conversions.unwrapArray(d.getTypes(), Object.class)).length;
              boolean _notEquals = (_length != 0);
              if (_notEquals) {
                _builder.append("\t");
                _builder.append("action ");
                String _name_2 = d.getName();
                _builder.append(_name_2, "\t");
                _builder.append("(");
                String _payload_1 = this.payloadNames.getPayload(d);
                _builder.append(_payload_1, "\t");
                _builder.append(")");
                _builder.newLineIfNotEmpty();
              } else {
                _builder.append("\t");
                _builder.append("action ");
                String _name_3 = d.getName();
                _builder.append(_name_3, "\t");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    {
      for(final RoleSet r : rolesetList) {
        _builder.append("\t");
        _builder.append("proposition ");
        String _name_4 = r.getRef().getName();
        _builder.append(_name_4, "\t");
        _builder.append("Hello");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }

  public CharSequence genStartFile(final EObject roles) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.Scanner;");
    _builder.newLine();
    _builder.append("import jade.wrapper.ContainerController;");
    _builder.newLine();
    _builder.append("import jadescript.java.Jadescript;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Start {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try (Scanner scanner = new Scanner(System.in)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int port = (int) (Math.random()*1000) + 10000;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(port);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ContainerController container = Jadescript.newMainContainer(port);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    List<Role> roleList = EcoreUtil2.<Role>getAllContentsOfType(roles, Role.class);
    _builder.newLineIfNotEmpty();
    {
      for(final Role r : roleList) {
        {
          if ((r instanceof RoleOne)) {
            _builder.append("\t\t");
            String _name = ((RoleOne)r).getName();
            _builder.append(_name, "\t\t");
            _builder.append(".create(container, \"");
            String _name_1 = ((RoleOne)r).getName();
            _builder.append(_name_1, "\t\t");
            _builder.append("\");");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t\t");
            _builder.append("for(int i=0; i<3; i++){ //rimpiazza 3 con il numero di agenti richiesti");
            _builder.newLine();
            _builder.append("\t\t");
            _builder.append("\t");
            String _name_2 = r.getName();
            _builder.append(_name_2, "\t\t\t");
            _builder.append(".create(container, \"");
            String _name_3 = r.getName();
            _builder.append(_name_3, "\t\t\t");
            _builder.append("\"+Integer.toString(i));");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
      }
    }
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("e.printStackTrace();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
}
