/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.globalTypes.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.globalTypes.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
			builder.put(grammarAccess.getProtocolAccess().getBeginAlternatives_0(), "rule__Protocol__BeginAlternatives_0");
			builder.put(grammarAccess.getMessageAccess().getAlternatives(), "rule__Message__Alternatives");
			builder.put(grammarAccess.getMessageNormalAccess().getAlternatives_1(), "rule__MessageNormal__Alternatives_1");
			builder.put(grammarAccess.getLocalProtocolAccess().getAlternatives_7(), "rule__LocalProtocol__Alternatives_7");
			builder.put(grammarAccess.getProtocolLAccess().getBeginAlternatives_0(), "rule__ProtocolL__BeginAlternatives_0");
			builder.put(grammarAccess.getMessageLAccess().getAlternatives(), "rule__MessageL__Alternatives");
			builder.put(grammarAccess.getMessageNormalLAccess().getAlternatives_1(), "rule__MessageNormalL__Alternatives_1");
			builder.put(grammarAccess.getMessageTypeAccess().getAlternatives(), "rule__MessageType__Alternatives");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getGlobalProtocolAccess().getGroup(), "rule__GlobalProtocol__Group__0");
			builder.put(grammarAccess.getRolesAccess().getGroup(), "rule__Roles__Group__0");
			builder.put(grammarAccess.getRolesAccess().getGroup_1(), "rule__Roles__Group_1__0");
			builder.put(grammarAccess.getRoleOneAccess().getGroup(), "rule__RoleOne__Group__0");
			builder.put(grammarAccess.getRoleSetAccess().getGroup(), "rule__RoleSet__Group__0");
			builder.put(grammarAccess.getRecursionAccess().getGroup(), "rule__Recursion__Group__0");
			builder.put(grammarAccess.getCloseRecursionAccess().getGroup(), "rule__CloseRecursion__Group__0");
			builder.put(grammarAccess.getForEachAccess().getGroup(), "rule__ForEach__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup_6(), "rule__Choice__Group_6__0");
			builder.put(grammarAccess.getMessageNormalAccess().getGroup(), "rule__MessageNormal__Group__0");
			builder.put(grammarAccess.getMessageNormalAccess().getGroup_1_0(), "rule__MessageNormal__Group_1_0__0");
			builder.put(grammarAccess.getMessageQuitAccess().getGroup(), "rule__MessageQuit__Group__0");
			builder.put(grammarAccess.getPayloadAccess().getGroup(), "rule__Payload__Group__0");
			builder.put(grammarAccess.getPayloadAccess().getGroup_1(), "rule__Payload__Group_1__0");
			builder.put(grammarAccess.getLocalProtocolAccess().getGroup(), "rule__LocalProtocol__Group__0");
			builder.put(grammarAccess.getLocalProtocolAccess().getGroup_7_1(), "rule__LocalProtocol__Group_7_1__0");
			builder.put(grammarAccess.getRecursionLAccess().getGroup(), "rule__RecursionL__Group__0");
			builder.put(grammarAccess.getCloseRecursionLAccess().getGroup(), "rule__CloseRecursionL__Group__0");
			builder.put(grammarAccess.getMessageNormalLAccess().getGroup(), "rule__MessageNormalL__Group__0");
			builder.put(grammarAccess.getMessageNormalLAccess().getGroup_1_0(), "rule__MessageNormalL__Group_1_0__0");
			builder.put(grammarAccess.getMessageQuitLAccess().getGroup(), "rule__MessageQuitL__Group__0");
			builder.put(grammarAccess.getSenderLAccess().getGroup(), "rule__SenderL__Group__0");
			builder.put(grammarAccess.getReceiverLAccess().getGroup(), "rule__ReceiverL__Group__0");
			builder.put(grammarAccess.getChoiceLAccess().getGroup(), "rule__ChoiceL__Group__0");
			builder.put(grammarAccess.getChoiceLAccess().getGroup_6(), "rule__ChoiceL__Group_6__0");
			builder.put(grammarAccess.getForEachLAccess().getGroup(), "rule__ForEachL__Group__0");
			builder.put(grammarAccess.getModelAccess().getProtocolAssignment_0(), "rule__Model__ProtocolAssignment_0");
			builder.put(grammarAccess.getModelAccess().getProtocolAssignment_1(), "rule__Model__ProtocolAssignment_1");
			builder.put(grammarAccess.getGlobalProtocolAccess().getProtocolNameAssignment_2(), "rule__GlobalProtocol__ProtocolNameAssignment_2");
			builder.put(grammarAccess.getGlobalProtocolAccess().getRolesAssignment_4(), "rule__GlobalProtocol__RolesAssignment_4");
			builder.put(grammarAccess.getGlobalProtocolAccess().getProtocolAssignment_6(), "rule__GlobalProtocol__ProtocolAssignment_6");
			builder.put(grammarAccess.getRolesAccess().getRolesAssignment_0(), "rule__Roles__RolesAssignment_0");
			builder.put(grammarAccess.getRolesAccess().getRolesAssignment_1_1(), "rule__Roles__RolesAssignment_1_1");
			builder.put(grammarAccess.getRoleOneAccess().getNameAssignment_1(), "rule__RoleOne__NameAssignment_1");
			builder.put(grammarAccess.getRoleSetAccess().getNameAssignment_1(), "rule__RoleSet__NameAssignment_1");
			builder.put(grammarAccess.getRoleSetAccess().getRefAssignment_3(), "rule__RoleSet__RefAssignment_3");
			builder.put(grammarAccess.getProtocolAccess().getBeginAssignment(), "rule__Protocol__BeginAssignment");
			builder.put(grammarAccess.getEndProtocolAccess().getEndAssignment(), "rule__EndProtocol__EndAssignment");
			builder.put(grammarAccess.getRecursionAccess().getNameAssignment_1(), "rule__Recursion__NameAssignment_1");
			builder.put(grammarAccess.getRecursionAccess().getRecProtocolAssignment_4(), "rule__Recursion__RecProtocolAssignment_4");
			builder.put(grammarAccess.getCloseRecursionAccess().getRecursionVariableAssignment_1(), "rule__CloseRecursion__RecursionVariableAssignment_1");
			builder.put(grammarAccess.getForEachAccess().getLoopRoleAssignment_1(), "rule__ForEach__LoopRoleAssignment_1");
			builder.put(grammarAccess.getForEachAccess().getRolesetAssignment_4(), "rule__ForEach__RolesetAssignment_4");
			builder.put(grammarAccess.getForEachAccess().getRefRoleAssignment_6(), "rule__ForEach__RefRoleAssignment_6");
			builder.put(grammarAccess.getForEachAccess().getForBodyAssignment_9(), "rule__ForEach__ForBodyAssignment_9");
			builder.put(grammarAccess.getForEachAccess().getProtocolAssignment_12(), "rule__ForEach__ProtocolAssignment_12");
			builder.put(grammarAccess.getChoiceAccess().getRoleAssignment_2(), "rule__Choice__RoleAssignment_2");
			builder.put(grammarAccess.getChoiceAccess().getBranchesAssignment_4(), "rule__Choice__BranchesAssignment_4");
			builder.put(grammarAccess.getChoiceAccess().getBranchesAssignment_6_2(), "rule__Choice__BranchesAssignment_6_2");
			builder.put(grammarAccess.getMessageNormalAccess().getMessageTypeAssignment_0(), "rule__MessageNormal__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageNormalAccess().getPayloadAssignment_1_0_1(), "rule__MessageNormal__PayloadAssignment_1_0_1");
			builder.put(grammarAccess.getMessageNormalAccess().getSenderAssignment_3(), "rule__MessageNormal__SenderAssignment_3");
			builder.put(grammarAccess.getMessageNormalAccess().getReceiverAssignment_5(), "rule__MessageNormal__ReceiverAssignment_5");
			builder.put(grammarAccess.getMessageNormalAccess().getProtocolAssignment_7(), "rule__MessageNormal__ProtocolAssignment_7");
			builder.put(grammarAccess.getMessageQuitAccess().getMessageTypeAssignment_0(), "rule__MessageQuit__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageQuitAccess().getSenderAssignment_3(), "rule__MessageQuit__SenderAssignment_3");
			builder.put(grammarAccess.getMessageQuitAccess().getReceiverAssignment_5(), "rule__MessageQuit__ReceiverAssignment_5");
			builder.put(grammarAccess.getPayloadAccess().getTypesAssignment_0(), "rule__Payload__TypesAssignment_0");
			builder.put(grammarAccess.getPayloadAccess().getTypesAssignment_1_1(), "rule__Payload__TypesAssignment_1_1");
			builder.put(grammarAccess.getLocalProtocolAccess().getProtocolNameAssignment_2(), "rule__LocalProtocol__ProtocolNameAssignment_2");
			builder.put(grammarAccess.getLocalProtocolAccess().getProjectedRoleAssignment_4(), "rule__LocalProtocol__ProjectedRoleAssignment_4");
			builder.put(grammarAccess.getLocalProtocolAccess().getRolesAssignment_6(), "rule__LocalProtocol__RolesAssignment_6");
			builder.put(grammarAccess.getLocalProtocolAccess().getProtocolAssignment_8(), "rule__LocalProtocol__ProtocolAssignment_8");
			builder.put(grammarAccess.getProtocolLAccess().getBeginAssignment(), "rule__ProtocolL__BeginAssignment");
			builder.put(grammarAccess.getRecursionLAccess().getNameAssignment_1(), "rule__RecursionL__NameAssignment_1");
			builder.put(grammarAccess.getRecursionLAccess().getRecProtocolAssignment_4(), "rule__RecursionL__RecProtocolAssignment_4");
			builder.put(grammarAccess.getCloseRecursionLAccess().getRecursionVariableAssignment_1(), "rule__CloseRecursionL__RecursionVariableAssignment_1");
			builder.put(grammarAccess.getMessageNormalLAccess().getMessageTypeAssignment_0(), "rule__MessageNormalL__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageNormalLAccess().getPayloadAssignment_1_0_1(), "rule__MessageNormalL__PayloadAssignment_1_0_1");
			builder.put(grammarAccess.getMessageNormalLAccess().getSendReceiveAssignment_2(), "rule__MessageNormalL__SendReceiveAssignment_2");
			builder.put(grammarAccess.getMessageNormalLAccess().getProtocolAssignment_4(), "rule__MessageNormalL__ProtocolAssignment_4");
			builder.put(grammarAccess.getMessageQuitLAccess().getMessageTypeAssignment_0(), "rule__MessageQuitL__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageQuitLAccess().getSendReceiveAssignment_2(), "rule__MessageQuitL__SendReceiveAssignment_2");
			builder.put(grammarAccess.getSenderLAccess().getRoleAssignment_1(), "rule__SenderL__RoleAssignment_1");
			builder.put(grammarAccess.getReceiverLAccess().getRoleAssignment_1(), "rule__ReceiverL__RoleAssignment_1");
			builder.put(grammarAccess.getChoiceLAccess().getRoleMakingChoiceAssignment_2(), "rule__ChoiceL__RoleMakingChoiceAssignment_2");
			builder.put(grammarAccess.getChoiceLAccess().getBranchesAssignment_4(), "rule__ChoiceL__BranchesAssignment_4");
			builder.put(grammarAccess.getChoiceLAccess().getBranchesAssignment_6_2(), "rule__ChoiceL__BranchesAssignment_6_2");
			builder.put(grammarAccess.getForEachLAccess().getEachRoleAssignment_1(), "rule__ForEachL__EachRoleAssignment_1");
			builder.put(grammarAccess.getForEachLAccess().getRolesetAssignment_4(), "rule__ForEachL__RolesetAssignment_4");
			builder.put(grammarAccess.getForEachLAccess().getRefroleAssignment_6(), "rule__ForEachL__RefroleAssignment_6");
			builder.put(grammarAccess.getForEachLAccess().getBranchAssignment_9(), "rule__ForEachL__BranchAssignment_9");
			builder.put(grammarAccess.getForEachLAccess().getProtocolAssignment_12(), "rule__ForEachL__ProtocolAssignment_12");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
