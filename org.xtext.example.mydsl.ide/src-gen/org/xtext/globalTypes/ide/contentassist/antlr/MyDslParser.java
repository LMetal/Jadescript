/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.globalTypes.ide.contentassist.antlr.internal.InternalMyDslParser;
import org.xtext.globalTypes.services.MyDslGrammarAccess;

public class MyDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(MyDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, MyDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getModelAccess().getAlternatives(), "rule__Model__Alternatives");
			builder.put(grammarAccess.getRoleAccess().getAlternatives(), "rule__Role__Alternatives");
			builder.put(grammarAccess.getProtocolAccess().getAlternatives(), "rule__Protocol__Alternatives");
			builder.put(grammarAccess.getProtocolAccess().getActionsAlternatives_0_1_0(), "rule__Protocol__ActionsAlternatives_0_1_0");
			builder.put(grammarAccess.getPayloadAccess().getAlternatives(), "rule__Payload__Alternatives");
			builder.put(grammarAccess.getProtocolLAccess().getActionsAlternatives_1_0(), "rule__ProtocolL__ActionsAlternatives_1_0");
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getGlobalProtocolAccess().getGroup(), "rule__GlobalProtocol__Group__0");
			builder.put(grammarAccess.getRolesAccess().getGroup(), "rule__Roles__Group__0");
			builder.put(grammarAccess.getRolesAccess().getGroup_1(), "rule__Roles__Group_1__0");
			builder.put(grammarAccess.getRoleOneAccess().getGroup(), "rule__RoleOne__Group__0");
			builder.put(grammarAccess.getRoleSetAccess().getGroup(), "rule__RoleSet__Group__0");
			builder.put(grammarAccess.getProtocolAccess().getGroup_0(), "rule__Protocol__Group_0__0");
			builder.put(grammarAccess.getRecursionAccess().getGroup(), "rule__Recursion__Group__0");
			builder.put(grammarAccess.getCloseRecursionAccess().getGroup(), "rule__CloseRecursion__Group__0");
			builder.put(grammarAccess.getForEachAccess().getGroup(), "rule__ForEach__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup(), "rule__Choice__Group__0");
			builder.put(grammarAccess.getChoiceAccess().getGroup_6(), "rule__Choice__Group_6__0");
			builder.put(grammarAccess.getChoiceBranchAccess().getGroup(), "rule__ChoiceBranch__Group__0");
			builder.put(grammarAccess.getMessageAccess().getGroup(), "rule__Message__Group__0");
			builder.put(grammarAccess.getPayloadAccess().getGroup_0(), "rule__Payload__Group_0__0");
			builder.put(grammarAccess.getPayloadAccess().getGroup_0_1(), "rule__Payload__Group_0_1__0");
			builder.put(grammarAccess.getPayloadAccess().getGroup_0_1_1(), "rule__Payload__Group_0_1_1__0");
			builder.put(grammarAccess.getLocalProtocolAccess().getGroup(), "rule__LocalProtocol__Group__0");
			builder.put(grammarAccess.getProtocolLAccess().getGroup(), "rule__ProtocolL__Group__0");
			builder.put(grammarAccess.getMessageLAccess().getGroup(), "rule__MessageL__Group__0");
			builder.put(grammarAccess.getSenderLAccess().getGroup(), "rule__SenderL__Group__0");
			builder.put(grammarAccess.getReceiverLAccess().getGroup(), "rule__ReceiverL__Group__0");
			builder.put(grammarAccess.getChoiceLAccess().getGroup(), "rule__ChoiceL__Group__0");
			builder.put(grammarAccess.getChoiceLAccess().getGroup_6(), "rule__ChoiceL__Group_6__0");
			builder.put(grammarAccess.getChoiceBranchLAccess().getGroup(), "rule__ChoiceBranchL__Group__0");
			builder.put(grammarAccess.getForEachLAccess().getGroup(), "rule__ForEachL__Group__0");
			builder.put(grammarAccess.getModelAccess().getProtocolAssignment_0(), "rule__Model__ProtocolAssignment_0");
			builder.put(grammarAccess.getModelAccess().getProtocolAssignment_1(), "rule__Model__ProtocolAssignment_1");
			builder.put(grammarAccess.getGlobalProtocolAccess().getProtocolNameAssignment_2(), "rule__GlobalProtocol__ProtocolNameAssignment_2");
			builder.put(grammarAccess.getGlobalProtocolAccess().getRolesAssignment_4(), "rule__GlobalProtocol__RolesAssignment_4");
			builder.put(grammarAccess.getGlobalProtocolAccess().getProtocolAssignment_6(), "rule__GlobalProtocol__ProtocolAssignment_6");
			builder.put(grammarAccess.getRolesAccess().getRolesAssignment_0(), "rule__Roles__RolesAssignment_0");
			builder.put(grammarAccess.getRolesAccess().getRolesAssignment_1_1(), "rule__Roles__RolesAssignment_1_1");
			builder.put(grammarAccess.getRoleOneAccess().getNameAssignment_1(), "rule__RoleOne__NameAssignment_1");
			builder.put(grammarAccess.getRoleSetAccess().getNameAssignment_1(), "rule__RoleSet__NameAssignment_1");
			builder.put(grammarAccess.getRoleSetAccess().getRefAssignment_3(), "rule__RoleSet__RefAssignment_3");
			builder.put(grammarAccess.getProtocolAccess().getActionsAssignment_0_1(), "rule__Protocol__ActionsAssignment_0_1");
			builder.put(grammarAccess.getProtocolAccess().getActionsAssignment_1(), "rule__Protocol__ActionsAssignment_1");
			builder.put(grammarAccess.getRecursionAccess().getNameAssignment_1(), "rule__Recursion__NameAssignment_1");
			builder.put(grammarAccess.getRecursionAccess().getRecProtocolAssignment_3(), "rule__Recursion__RecProtocolAssignment_3");
			builder.put(grammarAccess.getCloseRecursionAccess().getRecursionVariableAssignment_1(), "rule__CloseRecursion__RecursionVariableAssignment_1");
			builder.put(grammarAccess.getForEachAccess().getEachRoleAssignment_1(), "rule__ForEach__EachRoleAssignment_1");
			builder.put(grammarAccess.getForEachAccess().getRolesetAssignment_3(), "rule__ForEach__RolesetAssignment_3");
			builder.put(grammarAccess.getForEachAccess().getRefRoleAssignment_5(), "rule__ForEach__RefRoleAssignment_5");
			builder.put(grammarAccess.getForEachAccess().getBranchAssignment_7(), "rule__ForEach__BranchAssignment_7");
			builder.put(grammarAccess.getChoiceAccess().getRoleAssignment_2(), "rule__Choice__RoleAssignment_2");
			builder.put(grammarAccess.getChoiceAccess().getBranchesAssignment_4(), "rule__Choice__BranchesAssignment_4");
			builder.put(grammarAccess.getChoiceAccess().getBranchesAssignment_6_2(), "rule__Choice__BranchesAssignment_6_2");
			builder.put(grammarAccess.getChoiceBranchAccess().getMessageAssignment_0(), "rule__ChoiceBranch__MessageAssignment_0");
			builder.put(grammarAccess.getChoiceBranchAccess().getProtocolAssignment_1(), "rule__ChoiceBranch__ProtocolAssignment_1");
			builder.put(grammarAccess.getMessageAccess().getMessageTypeAssignment_0(), "rule__Message__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageAccess().getPayloadAssignment_2(), "rule__Message__PayloadAssignment_2");
			builder.put(grammarAccess.getMessageAccess().getSenderAssignment_5(), "rule__Message__SenderAssignment_5");
			builder.put(grammarAccess.getMessageAccess().getReceiverAssignment_7(), "rule__Message__ReceiverAssignment_7");
			builder.put(grammarAccess.getPayloadAccess().getTypesAssignment_0_1_0(), "rule__Payload__TypesAssignment_0_1_0");
			builder.put(grammarAccess.getPayloadAccess().getTypesAssignment_0_1_1_1(), "rule__Payload__TypesAssignment_0_1_1_1");
			builder.put(grammarAccess.getPayloadAccess().getTypesAssignment_1(), "rule__Payload__TypesAssignment_1");
			builder.put(grammarAccess.getLocalProtocolAccess().getProtocolNameAssignment_2(), "rule__LocalProtocol__ProtocolNameAssignment_2");
			builder.put(grammarAccess.getLocalProtocolAccess().getProjectedRoleAssignment_4(), "rule__LocalProtocol__ProjectedRoleAssignment_4");
			builder.put(grammarAccess.getLocalProtocolAccess().getRolesAssignment_6(), "rule__LocalProtocol__RolesAssignment_6");
			builder.put(grammarAccess.getLocalProtocolAccess().getProtocolAssignment_9(), "rule__LocalProtocol__ProtocolAssignment_9");
			builder.put(grammarAccess.getProtocolLAccess().getActionsAssignment_1(), "rule__ProtocolL__ActionsAssignment_1");
			builder.put(grammarAccess.getMessageLAccess().getMessageTypeAssignment_0(), "rule__MessageL__MessageTypeAssignment_0");
			builder.put(grammarAccess.getMessageLAccess().getPayloadAssignment_2(), "rule__MessageL__PayloadAssignment_2");
			builder.put(grammarAccess.getMessageLAccess().getTargetAssignment_4(), "rule__MessageL__TargetAssignment_4");
			builder.put(grammarAccess.getMessageLAccess().getTargetAssignment_5(), "rule__MessageL__TargetAssignment_5");
			builder.put(grammarAccess.getSenderLAccess().getSenderAssignment_1(), "rule__SenderL__SenderAssignment_1");
			builder.put(grammarAccess.getReceiverLAccess().getToAssignment_1(), "rule__ReceiverL__ToAssignment_1");
			builder.put(grammarAccess.getChoiceLAccess().getRoleAssignment_2(), "rule__ChoiceL__RoleAssignment_2");
			builder.put(grammarAccess.getChoiceLAccess().getBranchesAssignment_4(), "rule__ChoiceL__BranchesAssignment_4");
			builder.put(grammarAccess.getChoiceLAccess().getBranchesAssignment_6_2(), "rule__ChoiceL__BranchesAssignment_6_2");
			builder.put(grammarAccess.getChoiceBranchLAccess().getMessageAssignment_0(), "rule__ChoiceBranchL__MessageAssignment_0");
			builder.put(grammarAccess.getChoiceBranchLAccess().getProtocolAssignment_1(), "rule__ChoiceBranchL__ProtocolAssignment_1");
			builder.put(grammarAccess.getForEachLAccess().getEachRoleAssignment_1(), "rule__ForEachL__EachRoleAssignment_1");
			builder.put(grammarAccess.getForEachLAccess().getRoleAssignment_3(), "rule__ForEachL__RoleAssignment_3");
			builder.put(grammarAccess.getForEachLAccess().getBranchAssignment_5(), "rule__ForEachL__BranchAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private MyDslGrammarAccess grammarAccess;

	@Override
	protected InternalMyDslParser createParser() {
		InternalMyDslParser result = new InternalMyDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public MyDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(MyDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
