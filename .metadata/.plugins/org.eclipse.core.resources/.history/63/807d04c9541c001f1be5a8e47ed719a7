/*
 * generated by Xtext 2.34.0
 */
package org.xtext.globalTypes.validation;


import java.util.HashMap;
import java.util.List;

import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.validation.Check;
import org.xtext.globalTypes.myDsl.Choice;
import org.xtext.globalTypes.myDsl.Message;
import org.xtext.globalTypes.myDsl.Model;
import org.xtext.globalTypes.myDsl.MyDslPackage;
import org.xtext.globalTypes.myDsl.Role;
import org.xtext.globalTypes.myDsl.RoleMultiple;
import org.xtext.globalTypes.myDsl.RoleOne;
import org.xtext.globalTypes.myDsl.Roles;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class MyDslValidator extends AbstractMyDslValidator {		
		
		@Check
		public void choiceMessageFromChoiceAgent(Choice c) {
			for(int i=0; i<c.getMessage().size(); i++) {
				if(c.getRole() != c.getMessage().get(i).getSender()) {
					error("Role sending message must be the role chosing",
							c,
							MyDslPackage.Literals.CHOICE__ROLE
							);
					error("Role sending message must be the role chosing",
							c.getMessage().get(i),
							MyDslPackage.Literals.MESSAGE__SENDER
							);
				}
			}
			
		}
		
		//TODO
		//add verification each loop variable not used after each loop
		
		@Check
		public void singleSender(Message m) {
			if(m.getSender() instanceof RoleMultiple) {
				error("Sender of message must not be a role multiple",
						m,
						MyDslPackage.Literals.MESSAGE__SENDER);
			}
		}
		
		
		@Check
		public void rightReference(Model m) {
			List<ForEach> eachLoopList = EcoreUtil2.getAllContentsOfType(m, ForEach.class);
			List<RoleMultiple> rolesetDef = EcoreUtil2.getAllContentsOfType(m, RoleMultiple.class);
			
			var references = new HashMap<RoleMultiple, RoleOne>();
			for(RoleMultiple r: rolesetDef) {
				references.put(r, r.getRef());
			}
			
			
For			for(Message message : messageList) {
				if(message.getReceiver() instanceof RoleMultiple) {
					if(message.getSender() != references.get(message.getReceiver())) {
						error("Sender of message must be the role associated with roleset",
								m,
								MyDslPackage.Literals.MESSAGE__SENDER);
					}
				}
			}
			
		}
		
		
		@Check
		public void rolesUnique(Roles roles) {
			HashMap<String, Role> map = new HashMap<String, Role>();
			for(Role r: roles.getRoles()) {
				if(map.containsKey(r.getName())) {
					error("Roles name must be unique", 
							r,
							MyDslPackage.Literals.ROLE__NAME
							);
					
					error("Roles name must be unique", 
							map.get(r.getName()),
							MyDslPackage.Literals.ROLE__NAME
							);
				} else {
					map.put(r.getName(), r);
				}
			}
			
			
		}
	
}
